
task_shceduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013d4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08001494  08001494  00002494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080014f0  080014f0  00003074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080014f0  080014f0  00003074  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080014f0  080014f0  00003074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080014f0  080014f0  000024f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080014f4  080014f4  000024f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  080014f8  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  20000074  0800156c  00003074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  0800156c  000032a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00003074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000042b  00000000  00000000  0000309c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000023e  00000000  00000000  000034c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000c8  00000000  00000000  00003708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000088  00000000  00000000  000037d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000021c7  00000000  00000000  00003858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000bae  00000000  00000000  00005a1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00007e36  00000000  00000000  000065cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000e403  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000bd0  00000000  00000000  0000e448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0000f018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800147c 	.word	0x0800147c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	0800147c 	.word	0x0800147c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <main>:
uint32_t task_handlers[MAX_TASKS];
uint8_t current_task=0;
//1. DEFINE MACROS
//2. SYSTICK OF 1MS, processor clock= systick timer count clock
int main(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
	initialise_monitor_handles();
 8000234:	f001 f8a8 	bl	8001388 <initialise_monitor_handles>
	//0. enable processor faults there are none in cortex m0
	//1. init MSP for sched stack
	init_scheduler_stack(SCHED_STACK_START);
 8000238:	4b0e      	ldr	r3, [pc, #56]	@ (8000274 <main+0x44>)
 800023a:	0018      	movs	r0, r3
 800023c:	f000 f88c 	bl	8000358 <init_scheduler_stack>
	//2. capture addresses of different task handlers
	task_handlers[0]= (uint32_t)task1_handler;
 8000240:	4a0d      	ldr	r2, [pc, #52]	@ (8000278 <main+0x48>)
 8000242:	4b0e      	ldr	r3, [pc, #56]	@ (800027c <main+0x4c>)
 8000244:	601a      	str	r2, [r3, #0]
	task_handlers[1]= (uint32_t)task2_handler;
 8000246:	4a0e      	ldr	r2, [pc, #56]	@ (8000280 <main+0x50>)
 8000248:	4b0c      	ldr	r3, [pc, #48]	@ (800027c <main+0x4c>)
 800024a:	605a      	str	r2, [r3, #4]
	task_handlers[2]= (uint32_t)task3_handler;
 800024c:	4a0d      	ldr	r2, [pc, #52]	@ (8000284 <main+0x54>)
 800024e:	4b0b      	ldr	r3, [pc, #44]	@ (800027c <main+0x4c>)
 8000250:	609a      	str	r2, [r3, #8]
	task_handlers[3]= (uint32_t)task4_handler;
 8000252:	4a0d      	ldr	r2, [pc, #52]	@ (8000288 <main+0x58>)
 8000254:	4b09      	ldr	r3, [pc, #36]	@ (800027c <main+0x4c>)
 8000256:	60da      	str	r2, [r3, #12]
	//3. store dummy frames
	init_tasks_stack();
 8000258:	f000 f8f0 	bl	800043c <init_tasks_stack>
	//4. generate exceptions of systick
	init_systick_timer(TICK_HZ);
 800025c:	23fa      	movs	r3, #250	@ 0xfa
 800025e:	009b      	lsls	r3, r3, #2
 8000260:	0018      	movs	r0, r3
 8000262:	f000 f83b 	bl	80002dc <init_systick_timer>

	//5. change stack pointer to PSP till here SP was MSP
	switch_sp_to_psp();
 8000266:	f000 f8b5 	bl	80003d4 <switch_sp_to_psp>


	task1_handler();
 800026a:	f000 f80f 	bl	800028c <task1_handler>
	for(;;);
 800026e:	46c0      	nop			@ (mov r8, r8)
 8000270:	e7fd      	b.n	800026e <main+0x3e>
 8000272:	46c0      	nop			@ (mov r8, r8)
 8000274:	20003800 	.word	0x20003800
 8000278:	0800028d 	.word	0x0800028d
 800027c:	20000090 	.word	0x20000090
 8000280:	080002a1 	.word	0x080002a1
 8000284:	080002b5 	.word	0x080002b5
 8000288:	080002c9 	.word	0x080002c9

0800028c <task1_handler>:
}

void task1_handler(void){
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0

	while(1){
		printf("This is task 1\n");
 8000290:	4b02      	ldr	r3, [pc, #8]	@ (800029c <task1_handler+0x10>)
 8000292:	0018      	movs	r0, r3
 8000294:	f000 fa92 	bl	80007bc <puts>
 8000298:	e7fa      	b.n	8000290 <task1_handler+0x4>
 800029a:	46c0      	nop			@ (mov r8, r8)
 800029c:	08001494 	.word	0x08001494

080002a0 <task2_handler>:
	}
}
void task2_handler(void){
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0

	while(1){
		printf("This is task 2\n");
 80002a4:	4b02      	ldr	r3, [pc, #8]	@ (80002b0 <task2_handler+0x10>)
 80002a6:	0018      	movs	r0, r3
 80002a8:	f000 fa88 	bl	80007bc <puts>
 80002ac:	e7fa      	b.n	80002a4 <task2_handler+0x4>
 80002ae:	46c0      	nop			@ (mov r8, r8)
 80002b0:	080014a4 	.word	0x080014a4

080002b4 <task3_handler>:
	}
}
void task3_handler(void){
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0

	while(1){
		printf("This is task 3\n");
 80002b8:	4b02      	ldr	r3, [pc, #8]	@ (80002c4 <task3_handler+0x10>)
 80002ba:	0018      	movs	r0, r3
 80002bc:	f000 fa7e 	bl	80007bc <puts>
 80002c0:	e7fa      	b.n	80002b8 <task3_handler+0x4>
 80002c2:	46c0      	nop			@ (mov r8, r8)
 80002c4:	080014b4 	.word	0x080014b4

080002c8 <task4_handler>:
	}
}
void task4_handler(void){
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0

	while(1){
		printf("This is task 4\n");
 80002cc:	4b02      	ldr	r3, [pc, #8]	@ (80002d8 <task4_handler+0x10>)
 80002ce:	0018      	movs	r0, r3
 80002d0:	f000 fa74 	bl	80007bc <puts>
 80002d4:	e7fa      	b.n	80002cc <task4_handler+0x4>
 80002d6:	46c0      	nop			@ (mov r8, r8)
 80002d8:	080014c4 	.word	0x080014c4

080002dc <init_systick_timer>:
	}
}
void init_systick_timer(uint32_t tick_hz){
 80002dc:	b580      	push	{r7, lr}
 80002de:	b086      	sub	sp, #24
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t *) 0xE000E014;
 80002e4:	4b18      	ldr	r3, [pc, #96]	@ (8000348 <init_systick_timer+0x6c>)
 80002e6:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t *) 0xE000E010;
 80002e8:	4b18      	ldr	r3, [pc, #96]	@ (800034c <init_systick_timer+0x70>)
 80002ea:	613b      	str	r3, [r7, #16]
	uint32_t *pSCVR = (uint32_t *)0xE000E018;
 80002ec:	4b18      	ldr	r3, [pc, #96]	@ (8000350 <init_systick_timer+0x74>)
 80002ee:	60fb      	str	r3, [r7, #12]
	*pSCVR = 0;  // Writing any value clears it to 0
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	2200      	movs	r2, #0
 80002f4:	601a      	str	r2, [r3, #0]
	uint32_t count_value=(SYSTICK_TIM_CLK/tick_hz)-1;
 80002f6:	6879      	ldr	r1, [r7, #4]
 80002f8:	4816      	ldr	r0, [pc, #88]	@ (8000354 <init_systick_timer+0x78>)
 80002fa:	f7ff ff0d 	bl	8000118 <__udivsi3>
 80002fe:	0003      	movs	r3, r0
 8000300:	3b01      	subs	r3, #1
 8000302:	60bb      	str	r3, [r7, #8]
	//clear value of RVR
	*pSRVR &= ~(0x00FFFFFF);
 8000304:	697b      	ldr	r3, [r7, #20]
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	0e1b      	lsrs	r3, r3, #24
 800030a:	061a      	lsls	r2, r3, #24
 800030c:	697b      	ldr	r3, [r7, #20]
 800030e:	601a      	str	r2, [r3, #0]
	//load the value in RVR
	*pSRVR |= count_value;
 8000310:	697b      	ldr	r3, [r7, #20]
 8000312:	681a      	ldr	r2, [r3, #0]
 8000314:	68bb      	ldr	r3, [r7, #8]
 8000316:	431a      	orrs	r2, r3
 8000318:	697b      	ldr	r3, [r7, #20]
 800031a:	601a      	str	r2, [r3, #0]
	//do some settings, configure CSR
	//TICKINT(1) CLK SOURCE(2) ENABLE(0)
	*pSCSR |= (1<<1); //enable Systick exception request
 800031c:	693b      	ldr	r3, [r7, #16]
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	2202      	movs	r2, #2
 8000322:	431a      	orrs	r2, r3
 8000324:	693b      	ldr	r3, [r7, #16]
 8000326:	601a      	str	r2, [r3, #0]
	*pSCSR |= (1<<2); //indicates clock source, processor clock source
 8000328:	693b      	ldr	r3, [r7, #16]
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	2204      	movs	r2, #4
 800032e:	431a      	orrs	r2, r3
 8000330:	693b      	ldr	r3, [r7, #16]
 8000332:	601a      	str	r2, [r3, #0]

	//enable systcik
	*pSCSR |= (1<<0);
 8000334:	693b      	ldr	r3, [r7, #16]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2201      	movs	r2, #1
 800033a:	431a      	orrs	r2, r3
 800033c:	693b      	ldr	r3, [r7, #16]
 800033e:	601a      	str	r2, [r3, #0]

}
 8000340:	46c0      	nop			@ (mov r8, r8)
 8000342:	46bd      	mov	sp, r7
 8000344:	b006      	add	sp, #24
 8000346:	bd80      	pop	{r7, pc}
 8000348:	e000e014 	.word	0xe000e014
 800034c:	e000e010 	.word	0xe000e010
 8000350:	e000e018 	.word	0xe000e018
 8000354:	007a1200 	.word	0x007a1200

08000358 <init_scheduler_stack>:
//SP is special register so use inline assembly and naked fucntion to skip epilogue prilogue
__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack){
 8000358:	0003      	movs	r3, r0
	//__asm volatile("MSR MSP,R0");
	//1. init sp as MSP
	__asm volatile("MSR MSP,%0": : "r" (sched_top_of_stack) : );
 800035a:	f383 8808 	msr	MSP, r3
	__asm volatile("BX LR");//bx copies value of LR into PC
 800035e:	4770      	bx	lr
}
 8000360:	46c0      	nop			@ (mov r8, r8)
	...

08000364 <get_psp_value>:
uint32_t get_psp_value(void){
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
	return psp_of_tasks[current_task];
 8000368:	4b04      	ldr	r3, [pc, #16]	@ (800037c <get_psp_value+0x18>)
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	001a      	movs	r2, r3
 800036e:	4b04      	ldr	r3, [pc, #16]	@ (8000380 <get_psp_value+0x1c>)
 8000370:	0092      	lsls	r2, r2, #2
 8000372:	58d3      	ldr	r3, [r2, r3]
}
 8000374:	0018      	movs	r0, r3
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	46c0      	nop			@ (mov r8, r8)
 800037c:	200000a0 	.word	0x200000a0
 8000380:	20000000 	.word	0x20000000

08000384 <save_psp_value>:

void save_psp_value(uint32_t current_psp_value){
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
	psp_of_tasks[current_task]=current_psp_value;
 800038c:	4b05      	ldr	r3, [pc, #20]	@ (80003a4 <save_psp_value+0x20>)
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	001a      	movs	r2, r3
 8000392:	4b05      	ldr	r3, [pc, #20]	@ (80003a8 <save_psp_value+0x24>)
 8000394:	0092      	lsls	r2, r2, #2
 8000396:	6879      	ldr	r1, [r7, #4]
 8000398:	50d1      	str	r1, [r2, r3]
}
 800039a:	46c0      	nop			@ (mov r8, r8)
 800039c:	46bd      	mov	sp, r7
 800039e:	b002      	add	sp, #8
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	46c0      	nop			@ (mov r8, r8)
 80003a4:	200000a0 	.word	0x200000a0
 80003a8:	20000000 	.word	0x20000000

080003ac <update_next_task>:

void update_next_task(void){
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
	current_task++;
 80003b0:	4b07      	ldr	r3, [pc, #28]	@ (80003d0 <update_next_task+0x24>)
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	3301      	adds	r3, #1
 80003b6:	b2da      	uxtb	r2, r3
 80003b8:	4b05      	ldr	r3, [pc, #20]	@ (80003d0 <update_next_task+0x24>)
 80003ba:	701a      	strb	r2, [r3, #0]
	current_task %= MAX_TASKS;//ROUND ROBIN FASION
 80003bc:	4b04      	ldr	r3, [pc, #16]	@ (80003d0 <update_next_task+0x24>)
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	2203      	movs	r2, #3
 80003c2:	4013      	ands	r3, r2
 80003c4:	b2da      	uxtb	r2, r3
 80003c6:	4b02      	ldr	r3, [pc, #8]	@ (80003d0 <update_next_task+0x24>)
 80003c8:	701a      	strb	r2, [r3, #0]
}
 80003ca:	46c0      	nop			@ (mov r8, r8)
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	200000a0 	.word	0x200000a0

080003d4 <switch_sp_to_psp>:
__attribute__((naked)) void switch_sp_to_psp(void){
	//1. intialise PSP with TASK1 stack start address
	__asm volatile ("MOV R1, LR");	//preserve LR which conencts back to main()
 80003d4:	4671      	mov	r1, lr
	//get the value of psp of current task
	__asm volatile ("BL get_psp_value");//LR value will get curupted
 80003d6:	f7ff ffc5 	bl	8000364 <get_psp_value>
	__asm volatile ("MSR PSP,R0");//init PSP
 80003da:	f380 8809 	msr	PSP, r0
	__asm volatile ("MOV LR, R1");	//preserve LR which conencts back to main()
 80003de:	468e      	mov	lr, r1

	//2. change SP to PSP using CONTROL register
	__asm volatile ("MOV R0,#0X02");
 80003e0:	2002      	movs	r0, #2
	__asm volatile ("MSR CONTROL,R0");
 80003e2:	f380 8814 	msr	CONTROL, r0

	__asm volatile ("BX LR");
 80003e6:	4770      	bx	lr

	//NOTE: In Cortex-M0, the POP instruction only allows popping from registers R0-R7. but push is allowed from page 71 in cortex m0 user guide
}
 80003e8:	46c0      	nop			@ (mov r8, r8)

080003ea <SysTick_Handler>:
__attribute__((naked)) void SysTick_Handler(void)
{
	/*Save the context of current task*/

	//1. Get current running tasks PSP value
	__asm volatile("MRS R0,PSP");
 80003ea:	f3ef 8009 	mrs	r0, PSP
	//store register value to memory
	//STMDB- decrement and then store
	//__asm volatile("STMDB R0!,{R4-R11}");// ! IS AN OPTIONAL WRITEBACK SUFFIX, IF ! IS PRESENT THE FINAL ADDRESS, THAT IS LOADED FROM OR STORED TO IS WRITTEN BACK INTO Rn
	//2. Using that PSP value store SF2(R4 to R11)
	//Cortex-M0 doesn't support STMDB, so we'll use individual store instructions with manual SP adjustment
	__asm volatile(
 80003ee:	3820      	subs	r0, #32
 80003f0:	6004      	str	r4, [r0, #0]
 80003f2:	6045      	str	r5, [r0, #4]
 80003f4:	6086      	str	r6, [r0, #8]
 80003f6:	60c7      	str	r7, [r0, #12]
 80003f8:	4641      	mov	r1, r8
 80003fa:	6101      	str	r1, [r0, #16]
 80003fc:	4649      	mov	r1, r9
 80003fe:	6141      	str	r1, [r0, #20]
 8000400:	4651      	mov	r1, sl
 8000402:	6181      	str	r1, [r0, #24]
 8000404:	4659      	mov	r1, fp
 8000406:	61c1      	str	r1, [r0, #28]
			"STR R1, [R0, #24]\n"  // Store R10 (via R1)
			"MOV R1, R11\n"        // Move R11 to R1
			"STR R1, [R0, #28]\n"  // Store R11 (via R1)
	);

    __asm volatile("MOV R12, LR");          // Save LR to R7 (which is callee-saved)	//3. Save the current value of PSP
 8000408:	46f4      	mov	ip, lr
	__asm volatile("BL save_psp_value");//accroding to AAPCS R0 holds current PSP tasks PSP value
 800040a:	f7ff ffbb 	bl	8000384 <save_psp_value>

	/*Retrieve the context of next task*/

	//1. Decide next task to run
	__asm volatile("BL update_next_task");
 800040e:	f7ff ffcd 	bl	80003ac <update_next_task>
	//2. Get its past PSP value
	__asm volatile("BL get_psp_value");
 8000412:	f7ff ffa7 	bl	8000364 <get_psp_value>
	//3. USing that PSP value retrieve SF2(R4 to R11), MEMORY TO REGSITER
	//__asm volatile("LDMIA R0!,{R4-R11}");
	//Cortex-M0 doesn't support LDMIA, so we'll use individual load instructions
	__asm volatile(
 8000416:	6804      	ldr	r4, [r0, #0]
 8000418:	6845      	ldr	r5, [r0, #4]
 800041a:	6886      	ldr	r6, [r0, #8]
 800041c:	68c7      	ldr	r7, [r0, #12]
 800041e:	6901      	ldr	r1, [r0, #16]
 8000420:	4688      	mov	r8, r1
 8000422:	6941      	ldr	r1, [r0, #20]
 8000424:	4689      	mov	r9, r1
 8000426:	6981      	ldr	r1, [r0, #24]
 8000428:	468a      	mov	sl, r1
 800042a:	69c1      	ldr	r1, [r0, #28]
 800042c:	468b      	mov	fp, r1
 800042e:	3020      	adds	r0, #32
	        "MOV R11, R1\n"        // Move from R1 to R11
	        "ADD R0, R0, #32\n"    // Increment PSP by 32 bytes
	);

	//4. Update PSP and exit
	__asm volatile("MSR PSP,R0");
 8000430:	f380 8809 	msr	PSP, r0
	//NOW PSP POINTS TO NEXT SF1 frame of next updated task, therefore execution will go to next updated task
    __asm volatile("MOV LR, R12");
 8000434:	46e6      	mov	lr, ip
    __asm volatile("BX LR");
 8000436:	4770      	bx	lr
}
 8000438:	46c0      	nop			@ (mov r8, r8)
	...

0800043c <init_tasks_stack>:
void init_tasks_stack(void){
 800043c:	b580      	push	{r7, lr}
 800043e:	b084      	sub	sp, #16
 8000440:	af00      	add	r7, sp, #0
	uint32_t *pPSP;
	for(int i=0;i<MAX_TASKS;i++){
 8000442:	2300      	movs	r3, #0
 8000444:	60bb      	str	r3, [r7, #8]
 8000446:	e032      	b.n	80004ae <init_tasks_stack+0x72>
		pPSP=(uint32_t *) psp_of_tasks[i];
 8000448:	4b1d      	ldr	r3, [pc, #116]	@ (80004c0 <init_tasks_stack+0x84>)
 800044a:	68ba      	ldr	r2, [r7, #8]
 800044c:	0092      	lsls	r2, r2, #2
 800044e:	58d3      	ldr	r3, [r2, r3]
 8000450:	60fb      	str	r3, [r7, #12]
		//FD stack i.e decrement first and then store
		pPSP--;
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	3b04      	subs	r3, #4
 8000456:	60fb      	str	r3, [r7, #12]
		*pPSP=DUMMY_XPSR;//0x01000000
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	2280      	movs	r2, #128	@ 0x80
 800045c:	0452      	lsls	r2, r2, #17
 800045e:	601a      	str	r2, [r3, #0]

		pPSP--; //PC
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	3b04      	subs	r3, #4
 8000464:	60fb      	str	r3, [r7, #12]
		*pPSP=task_handlers[i];
 8000466:	4b17      	ldr	r3, [pc, #92]	@ (80004c4 <init_tasks_stack+0x88>)
 8000468:	68ba      	ldr	r2, [r7, #8]
 800046a:	0092      	lsls	r2, r2, #2
 800046c:	58d2      	ldr	r2, [r2, r3]
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	601a      	str	r2, [r3, #0]

		pPSP--; //LR
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	3b04      	subs	r3, #4
 8000476:	60fb      	str	r3, [r7, #12]
		*pPSP=0xFFFFFFFD;//thread mode and use PSP
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	2203      	movs	r2, #3
 800047c:	4252      	negs	r2, r2
 800047e:	601a      	str	r2, [r3, #0]

		for(int j=0;j<13;j++){
 8000480:	2300      	movs	r3, #0
 8000482:	607b      	str	r3, [r7, #4]
 8000484:	e008      	b.n	8000498 <init_tasks_stack+0x5c>
			pPSP--;
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	3b04      	subs	r3, #4
 800048a:	60fb      	str	r3, [r7, #12]
			*pPSP=0;
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	2200      	movs	r2, #0
 8000490:	601a      	str	r2, [r3, #0]
		for(int j=0;j<13;j++){
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	3301      	adds	r3, #1
 8000496:	607b      	str	r3, [r7, #4]
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	2b0c      	cmp	r3, #12
 800049c:	ddf3      	ble.n	8000486 <init_tasks_stack+0x4a>
		}
		psp_of_tasks[i]=(uint32_t)pPSP;//preserve value of PSP
 800049e:	68f9      	ldr	r1, [r7, #12]
 80004a0:	4b07      	ldr	r3, [pc, #28]	@ (80004c0 <init_tasks_stack+0x84>)
 80004a2:	68ba      	ldr	r2, [r7, #8]
 80004a4:	0092      	lsls	r2, r2, #2
 80004a6:	50d1      	str	r1, [r2, r3]
	for(int i=0;i<MAX_TASKS;i++){
 80004a8:	68bb      	ldr	r3, [r7, #8]
 80004aa:	3301      	adds	r3, #1
 80004ac:	60bb      	str	r3, [r7, #8]
 80004ae:	68bb      	ldr	r3, [r7, #8]
 80004b0:	2b03      	cmp	r3, #3
 80004b2:	ddc9      	ble.n	8000448 <init_tasks_stack+0xc>
	}

}
 80004b4:	46c0      	nop			@ (mov r8, r8)
 80004b6:	46c0      	nop			@ (mov r8, r8)
 80004b8:	46bd      	mov	sp, r7
 80004ba:	b004      	add	sp, #16
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	46c0      	nop			@ (mov r8, r8)
 80004c0:	20000000 	.word	0x20000000
 80004c4:	20000090 	.word	0x20000090

080004c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004d0:	4a14      	ldr	r2, [pc, #80]	@ (8000524 <_sbrk+0x5c>)
 80004d2:	4b15      	ldr	r3, [pc, #84]	@ (8000528 <_sbrk+0x60>)
 80004d4:	1ad3      	subs	r3, r2, r3
 80004d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004d8:	697b      	ldr	r3, [r7, #20]
 80004da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004dc:	4b13      	ldr	r3, [pc, #76]	@ (800052c <_sbrk+0x64>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d102      	bne.n	80004ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004e4:	4b11      	ldr	r3, [pc, #68]	@ (800052c <_sbrk+0x64>)
 80004e6:	4a12      	ldr	r2, [pc, #72]	@ (8000530 <_sbrk+0x68>)
 80004e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004ea:	4b10      	ldr	r3, [pc, #64]	@ (800052c <_sbrk+0x64>)
 80004ec:	681a      	ldr	r2, [r3, #0]
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	18d3      	adds	r3, r2, r3
 80004f2:	693a      	ldr	r2, [r7, #16]
 80004f4:	429a      	cmp	r2, r3
 80004f6:	d207      	bcs.n	8000508 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004f8:	f000 faac 	bl	8000a54 <__errno>
 80004fc:	0003      	movs	r3, r0
 80004fe:	220c      	movs	r2, #12
 8000500:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000502:	2301      	movs	r3, #1
 8000504:	425b      	negs	r3, r3
 8000506:	e009      	b.n	800051c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000508:	4b08      	ldr	r3, [pc, #32]	@ (800052c <_sbrk+0x64>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800050e:	4b07      	ldr	r3, [pc, #28]	@ (800052c <_sbrk+0x64>)
 8000510:	681a      	ldr	r2, [r3, #0]
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	18d2      	adds	r2, r2, r3
 8000516:	4b05      	ldr	r3, [pc, #20]	@ (800052c <_sbrk+0x64>)
 8000518:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800051a:	68fb      	ldr	r3, [r7, #12]
}
 800051c:	0018      	movs	r0, r3
 800051e:	46bd      	mov	sp, r7
 8000520:	b006      	add	sp, #24
 8000522:	bd80      	pop	{r7, pc}
 8000524:	20004000 	.word	0x20004000
 8000528:	00000400 	.word	0x00000400
 800052c:	200000a4 	.word	0x200000a4
 8000530:	200002a0 	.word	0x200002a0

08000534 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000534:	480d      	ldr	r0, [pc, #52]	@ (800056c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000536:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000538:	e000      	b.n	800053c <Reset_Handler+0x8>
 800053a:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800053c:	480c      	ldr	r0, [pc, #48]	@ (8000570 <LoopForever+0x6>)
  ldr r1, =_edata
 800053e:	490d      	ldr	r1, [pc, #52]	@ (8000574 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000540:	4a0d      	ldr	r2, [pc, #52]	@ (8000578 <LoopForever+0xe>)
  movs r3, #0
 8000542:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000544:	e002      	b.n	800054c <LoopCopyDataInit>

08000546 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000546:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000548:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800054a:	3304      	adds	r3, #4

0800054c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800054c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800054e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000550:	d3f9      	bcc.n	8000546 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000552:	4a0a      	ldr	r2, [pc, #40]	@ (800057c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000554:	4c0a      	ldr	r4, [pc, #40]	@ (8000580 <LoopForever+0x16>)
  movs r3, #0
 8000556:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000558:	e001      	b.n	800055e <LoopFillZerobss>

0800055a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800055a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800055c:	3204      	adds	r2, #4

0800055e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800055e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000560:	d3fb      	bcc.n	800055a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000562:	f000 fa7d 	bl	8000a60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000566:	f7ff fe63 	bl	8000230 <main>

0800056a <LoopForever>:

LoopForever:
  b LoopForever
 800056a:	e7fe      	b.n	800056a <LoopForever>
  ldr   r0, =_estack
 800056c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000570:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000574:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000578:	080014f8 	.word	0x080014f8
  ldr r2, =_sbss
 800057c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000580:	200002a0 	.word	0x200002a0

08000584 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000584:	e7fe      	b.n	8000584 <ADC_COMP_IRQHandler>
	...

08000588 <std>:
 8000588:	2300      	movs	r3, #0
 800058a:	b510      	push	{r4, lr}
 800058c:	0004      	movs	r4, r0
 800058e:	6003      	str	r3, [r0, #0]
 8000590:	6043      	str	r3, [r0, #4]
 8000592:	6083      	str	r3, [r0, #8]
 8000594:	8181      	strh	r1, [r0, #12]
 8000596:	6643      	str	r3, [r0, #100]	@ 0x64
 8000598:	81c2      	strh	r2, [r0, #14]
 800059a:	6103      	str	r3, [r0, #16]
 800059c:	6143      	str	r3, [r0, #20]
 800059e:	6183      	str	r3, [r0, #24]
 80005a0:	0019      	movs	r1, r3
 80005a2:	2208      	movs	r2, #8
 80005a4:	305c      	adds	r0, #92	@ 0x5c
 80005a6:	f000 f9ff 	bl	80009a8 <memset>
 80005aa:	4b0b      	ldr	r3, [pc, #44]	@ (80005d8 <std+0x50>)
 80005ac:	6224      	str	r4, [r4, #32]
 80005ae:	6263      	str	r3, [r4, #36]	@ 0x24
 80005b0:	4b0a      	ldr	r3, [pc, #40]	@ (80005dc <std+0x54>)
 80005b2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80005b4:	4b0a      	ldr	r3, [pc, #40]	@ (80005e0 <std+0x58>)
 80005b6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80005b8:	4b0a      	ldr	r3, [pc, #40]	@ (80005e4 <std+0x5c>)
 80005ba:	6323      	str	r3, [r4, #48]	@ 0x30
 80005bc:	4b0a      	ldr	r3, [pc, #40]	@ (80005e8 <std+0x60>)
 80005be:	429c      	cmp	r4, r3
 80005c0:	d005      	beq.n	80005ce <std+0x46>
 80005c2:	4b0a      	ldr	r3, [pc, #40]	@ (80005ec <std+0x64>)
 80005c4:	429c      	cmp	r4, r3
 80005c6:	d002      	beq.n	80005ce <std+0x46>
 80005c8:	4b09      	ldr	r3, [pc, #36]	@ (80005f0 <std+0x68>)
 80005ca:	429c      	cmp	r4, r3
 80005cc:	d103      	bne.n	80005d6 <std+0x4e>
 80005ce:	0020      	movs	r0, r4
 80005d0:	3058      	adds	r0, #88	@ 0x58
 80005d2:	f000 fa69 	bl	8000aa8 <__retarget_lock_init_recursive>
 80005d6:	bd10      	pop	{r4, pc}
 80005d8:	080007d1 	.word	0x080007d1
 80005dc:	080007f9 	.word	0x080007f9
 80005e0:	08000831 	.word	0x08000831
 80005e4:	0800085d 	.word	0x0800085d
 80005e8:	200000a8 	.word	0x200000a8
 80005ec:	20000110 	.word	0x20000110
 80005f0:	20000178 	.word	0x20000178

080005f4 <stdio_exit_handler>:
 80005f4:	b510      	push	{r4, lr}
 80005f6:	4a03      	ldr	r2, [pc, #12]	@ (8000604 <stdio_exit_handler+0x10>)
 80005f8:	4903      	ldr	r1, [pc, #12]	@ (8000608 <stdio_exit_handler+0x14>)
 80005fa:	4804      	ldr	r0, [pc, #16]	@ (800060c <stdio_exit_handler+0x18>)
 80005fc:	f000 f86c 	bl	80006d8 <_fwalk_sglue>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			@ (mov r8, r8)
 8000604:	20000010 	.word	0x20000010
 8000608:	08000db5 	.word	0x08000db5
 800060c:	20000020 	.word	0x20000020

08000610 <cleanup_stdio>:
 8000610:	6841      	ldr	r1, [r0, #4]
 8000612:	4b0b      	ldr	r3, [pc, #44]	@ (8000640 <cleanup_stdio+0x30>)
 8000614:	b510      	push	{r4, lr}
 8000616:	0004      	movs	r4, r0
 8000618:	4299      	cmp	r1, r3
 800061a:	d001      	beq.n	8000620 <cleanup_stdio+0x10>
 800061c:	f000 fbca 	bl	8000db4 <_fflush_r>
 8000620:	68a1      	ldr	r1, [r4, #8]
 8000622:	4b08      	ldr	r3, [pc, #32]	@ (8000644 <cleanup_stdio+0x34>)
 8000624:	4299      	cmp	r1, r3
 8000626:	d002      	beq.n	800062e <cleanup_stdio+0x1e>
 8000628:	0020      	movs	r0, r4
 800062a:	f000 fbc3 	bl	8000db4 <_fflush_r>
 800062e:	68e1      	ldr	r1, [r4, #12]
 8000630:	4b05      	ldr	r3, [pc, #20]	@ (8000648 <cleanup_stdio+0x38>)
 8000632:	4299      	cmp	r1, r3
 8000634:	d002      	beq.n	800063c <cleanup_stdio+0x2c>
 8000636:	0020      	movs	r0, r4
 8000638:	f000 fbbc 	bl	8000db4 <_fflush_r>
 800063c:	bd10      	pop	{r4, pc}
 800063e:	46c0      	nop			@ (mov r8, r8)
 8000640:	200000a8 	.word	0x200000a8
 8000644:	20000110 	.word	0x20000110
 8000648:	20000178 	.word	0x20000178

0800064c <global_stdio_init.part.0>:
 800064c:	b510      	push	{r4, lr}
 800064e:	4b09      	ldr	r3, [pc, #36]	@ (8000674 <global_stdio_init.part.0+0x28>)
 8000650:	4a09      	ldr	r2, [pc, #36]	@ (8000678 <global_stdio_init.part.0+0x2c>)
 8000652:	2104      	movs	r1, #4
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	4809      	ldr	r0, [pc, #36]	@ (800067c <global_stdio_init.part.0+0x30>)
 8000658:	2200      	movs	r2, #0
 800065a:	f7ff ff95 	bl	8000588 <std>
 800065e:	2201      	movs	r2, #1
 8000660:	2109      	movs	r1, #9
 8000662:	4807      	ldr	r0, [pc, #28]	@ (8000680 <global_stdio_init.part.0+0x34>)
 8000664:	f7ff ff90 	bl	8000588 <std>
 8000668:	2202      	movs	r2, #2
 800066a:	2112      	movs	r1, #18
 800066c:	4805      	ldr	r0, [pc, #20]	@ (8000684 <global_stdio_init.part.0+0x38>)
 800066e:	f7ff ff8b 	bl	8000588 <std>
 8000672:	bd10      	pop	{r4, pc}
 8000674:	200001e0 	.word	0x200001e0
 8000678:	080005f5 	.word	0x080005f5
 800067c:	200000a8 	.word	0x200000a8
 8000680:	20000110 	.word	0x20000110
 8000684:	20000178 	.word	0x20000178

08000688 <__sfp_lock_acquire>:
 8000688:	b510      	push	{r4, lr}
 800068a:	4802      	ldr	r0, [pc, #8]	@ (8000694 <__sfp_lock_acquire+0xc>)
 800068c:	f000 fa0d 	bl	8000aaa <__retarget_lock_acquire_recursive>
 8000690:	bd10      	pop	{r4, pc}
 8000692:	46c0      	nop			@ (mov r8, r8)
 8000694:	200001e9 	.word	0x200001e9

08000698 <__sfp_lock_release>:
 8000698:	b510      	push	{r4, lr}
 800069a:	4802      	ldr	r0, [pc, #8]	@ (80006a4 <__sfp_lock_release+0xc>)
 800069c:	f000 fa06 	bl	8000aac <__retarget_lock_release_recursive>
 80006a0:	bd10      	pop	{r4, pc}
 80006a2:	46c0      	nop			@ (mov r8, r8)
 80006a4:	200001e9 	.word	0x200001e9

080006a8 <__sinit>:
 80006a8:	b510      	push	{r4, lr}
 80006aa:	0004      	movs	r4, r0
 80006ac:	f7ff ffec 	bl	8000688 <__sfp_lock_acquire>
 80006b0:	6a23      	ldr	r3, [r4, #32]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d002      	beq.n	80006bc <__sinit+0x14>
 80006b6:	f7ff ffef 	bl	8000698 <__sfp_lock_release>
 80006ba:	bd10      	pop	{r4, pc}
 80006bc:	4b04      	ldr	r3, [pc, #16]	@ (80006d0 <__sinit+0x28>)
 80006be:	6223      	str	r3, [r4, #32]
 80006c0:	4b04      	ldr	r3, [pc, #16]	@ (80006d4 <__sinit+0x2c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d1f6      	bne.n	80006b6 <__sinit+0xe>
 80006c8:	f7ff ffc0 	bl	800064c <global_stdio_init.part.0>
 80006cc:	e7f3      	b.n	80006b6 <__sinit+0xe>
 80006ce:	46c0      	nop			@ (mov r8, r8)
 80006d0:	08000611 	.word	0x08000611
 80006d4:	200001e0 	.word	0x200001e0

080006d8 <_fwalk_sglue>:
 80006d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80006da:	0014      	movs	r4, r2
 80006dc:	2600      	movs	r6, #0
 80006de:	9000      	str	r0, [sp, #0]
 80006e0:	9101      	str	r1, [sp, #4]
 80006e2:	68a5      	ldr	r5, [r4, #8]
 80006e4:	6867      	ldr	r7, [r4, #4]
 80006e6:	3f01      	subs	r7, #1
 80006e8:	d504      	bpl.n	80006f4 <_fwalk_sglue+0x1c>
 80006ea:	6824      	ldr	r4, [r4, #0]
 80006ec:	2c00      	cmp	r4, #0
 80006ee:	d1f8      	bne.n	80006e2 <_fwalk_sglue+0xa>
 80006f0:	0030      	movs	r0, r6
 80006f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80006f4:	89ab      	ldrh	r3, [r5, #12]
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d908      	bls.n	800070c <_fwalk_sglue+0x34>
 80006fa:	220e      	movs	r2, #14
 80006fc:	5eab      	ldrsh	r3, [r5, r2]
 80006fe:	3301      	adds	r3, #1
 8000700:	d004      	beq.n	800070c <_fwalk_sglue+0x34>
 8000702:	0029      	movs	r1, r5
 8000704:	9800      	ldr	r0, [sp, #0]
 8000706:	9b01      	ldr	r3, [sp, #4]
 8000708:	4798      	blx	r3
 800070a:	4306      	orrs	r6, r0
 800070c:	3568      	adds	r5, #104	@ 0x68
 800070e:	e7ea      	b.n	80006e6 <_fwalk_sglue+0xe>

08000710 <_puts_r>:
 8000710:	6a03      	ldr	r3, [r0, #32]
 8000712:	b570      	push	{r4, r5, r6, lr}
 8000714:	0005      	movs	r5, r0
 8000716:	000e      	movs	r6, r1
 8000718:	6884      	ldr	r4, [r0, #8]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d101      	bne.n	8000722 <_puts_r+0x12>
 800071e:	f7ff ffc3 	bl	80006a8 <__sinit>
 8000722:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000724:	07db      	lsls	r3, r3, #31
 8000726:	d405      	bmi.n	8000734 <_puts_r+0x24>
 8000728:	89a3      	ldrh	r3, [r4, #12]
 800072a:	059b      	lsls	r3, r3, #22
 800072c:	d402      	bmi.n	8000734 <_puts_r+0x24>
 800072e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000730:	f000 f9bb 	bl	8000aaa <__retarget_lock_acquire_recursive>
 8000734:	89a3      	ldrh	r3, [r4, #12]
 8000736:	071b      	lsls	r3, r3, #28
 8000738:	d502      	bpl.n	8000740 <_puts_r+0x30>
 800073a:	6923      	ldr	r3, [r4, #16]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d11f      	bne.n	8000780 <_puts_r+0x70>
 8000740:	0021      	movs	r1, r4
 8000742:	0028      	movs	r0, r5
 8000744:	f000 f8d2 	bl	80008ec <__swsetup_r>
 8000748:	2800      	cmp	r0, #0
 800074a:	d019      	beq.n	8000780 <_puts_r+0x70>
 800074c:	2501      	movs	r5, #1
 800074e:	426d      	negs	r5, r5
 8000750:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000752:	07db      	lsls	r3, r3, #31
 8000754:	d405      	bmi.n	8000762 <_puts_r+0x52>
 8000756:	89a3      	ldrh	r3, [r4, #12]
 8000758:	059b      	lsls	r3, r3, #22
 800075a:	d402      	bmi.n	8000762 <_puts_r+0x52>
 800075c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800075e:	f000 f9a5 	bl	8000aac <__retarget_lock_release_recursive>
 8000762:	0028      	movs	r0, r5
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	3601      	adds	r6, #1
 8000768:	60a3      	str	r3, [r4, #8]
 800076a:	2b00      	cmp	r3, #0
 800076c:	da04      	bge.n	8000778 <_puts_r+0x68>
 800076e:	69a2      	ldr	r2, [r4, #24]
 8000770:	429a      	cmp	r2, r3
 8000772:	dc16      	bgt.n	80007a2 <_puts_r+0x92>
 8000774:	290a      	cmp	r1, #10
 8000776:	d014      	beq.n	80007a2 <_puts_r+0x92>
 8000778:	6823      	ldr	r3, [r4, #0]
 800077a:	1c5a      	adds	r2, r3, #1
 800077c:	6022      	str	r2, [r4, #0]
 800077e:	7019      	strb	r1, [r3, #0]
 8000780:	68a3      	ldr	r3, [r4, #8]
 8000782:	7831      	ldrb	r1, [r6, #0]
 8000784:	3b01      	subs	r3, #1
 8000786:	2900      	cmp	r1, #0
 8000788:	d1ed      	bne.n	8000766 <_puts_r+0x56>
 800078a:	60a3      	str	r3, [r4, #8]
 800078c:	2b00      	cmp	r3, #0
 800078e:	da0f      	bge.n	80007b0 <_puts_r+0xa0>
 8000790:	0022      	movs	r2, r4
 8000792:	0028      	movs	r0, r5
 8000794:	310a      	adds	r1, #10
 8000796:	f000 f867 	bl	8000868 <__swbuf_r>
 800079a:	3001      	adds	r0, #1
 800079c:	d0d6      	beq.n	800074c <_puts_r+0x3c>
 800079e:	250a      	movs	r5, #10
 80007a0:	e7d6      	b.n	8000750 <_puts_r+0x40>
 80007a2:	0022      	movs	r2, r4
 80007a4:	0028      	movs	r0, r5
 80007a6:	f000 f85f 	bl	8000868 <__swbuf_r>
 80007aa:	3001      	adds	r0, #1
 80007ac:	d1e8      	bne.n	8000780 <_puts_r+0x70>
 80007ae:	e7cd      	b.n	800074c <_puts_r+0x3c>
 80007b0:	6823      	ldr	r3, [r4, #0]
 80007b2:	1c5a      	adds	r2, r3, #1
 80007b4:	6022      	str	r2, [r4, #0]
 80007b6:	220a      	movs	r2, #10
 80007b8:	701a      	strb	r2, [r3, #0]
 80007ba:	e7f0      	b.n	800079e <_puts_r+0x8e>

080007bc <puts>:
 80007bc:	b510      	push	{r4, lr}
 80007be:	4b03      	ldr	r3, [pc, #12]	@ (80007cc <puts+0x10>)
 80007c0:	0001      	movs	r1, r0
 80007c2:	6818      	ldr	r0, [r3, #0]
 80007c4:	f7ff ffa4 	bl	8000710 <_puts_r>
 80007c8:	bd10      	pop	{r4, pc}
 80007ca:	46c0      	nop			@ (mov r8, r8)
 80007cc:	2000001c 	.word	0x2000001c

080007d0 <__sread>:
 80007d0:	b570      	push	{r4, r5, r6, lr}
 80007d2:	000c      	movs	r4, r1
 80007d4:	250e      	movs	r5, #14
 80007d6:	5f49      	ldrsh	r1, [r1, r5]
 80007d8:	f000 f914 	bl	8000a04 <_read_r>
 80007dc:	2800      	cmp	r0, #0
 80007de:	db03      	blt.n	80007e8 <__sread+0x18>
 80007e0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80007e2:	181b      	adds	r3, r3, r0
 80007e4:	6563      	str	r3, [r4, #84]	@ 0x54
 80007e6:	bd70      	pop	{r4, r5, r6, pc}
 80007e8:	89a3      	ldrh	r3, [r4, #12]
 80007ea:	4a02      	ldr	r2, [pc, #8]	@ (80007f4 <__sread+0x24>)
 80007ec:	4013      	ands	r3, r2
 80007ee:	81a3      	strh	r3, [r4, #12]
 80007f0:	e7f9      	b.n	80007e6 <__sread+0x16>
 80007f2:	46c0      	nop			@ (mov r8, r8)
 80007f4:	ffffefff 	.word	0xffffefff

080007f8 <__swrite>:
 80007f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007fa:	001f      	movs	r7, r3
 80007fc:	898b      	ldrh	r3, [r1, #12]
 80007fe:	0005      	movs	r5, r0
 8000800:	000c      	movs	r4, r1
 8000802:	0016      	movs	r6, r2
 8000804:	05db      	lsls	r3, r3, #23
 8000806:	d505      	bpl.n	8000814 <__swrite+0x1c>
 8000808:	230e      	movs	r3, #14
 800080a:	5ec9      	ldrsh	r1, [r1, r3]
 800080c:	2200      	movs	r2, #0
 800080e:	2302      	movs	r3, #2
 8000810:	f000 f8e4 	bl	80009dc <_lseek_r>
 8000814:	89a3      	ldrh	r3, [r4, #12]
 8000816:	4a05      	ldr	r2, [pc, #20]	@ (800082c <__swrite+0x34>)
 8000818:	0028      	movs	r0, r5
 800081a:	4013      	ands	r3, r2
 800081c:	81a3      	strh	r3, [r4, #12]
 800081e:	0032      	movs	r2, r6
 8000820:	230e      	movs	r3, #14
 8000822:	5ee1      	ldrsh	r1, [r4, r3]
 8000824:	003b      	movs	r3, r7
 8000826:	f000 f901 	bl	8000a2c <_write_r>
 800082a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800082c:	ffffefff 	.word	0xffffefff

08000830 <__sseek>:
 8000830:	b570      	push	{r4, r5, r6, lr}
 8000832:	000c      	movs	r4, r1
 8000834:	250e      	movs	r5, #14
 8000836:	5f49      	ldrsh	r1, [r1, r5]
 8000838:	f000 f8d0 	bl	80009dc <_lseek_r>
 800083c:	89a3      	ldrh	r3, [r4, #12]
 800083e:	1c42      	adds	r2, r0, #1
 8000840:	d103      	bne.n	800084a <__sseek+0x1a>
 8000842:	4a05      	ldr	r2, [pc, #20]	@ (8000858 <__sseek+0x28>)
 8000844:	4013      	ands	r3, r2
 8000846:	81a3      	strh	r3, [r4, #12]
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	2280      	movs	r2, #128	@ 0x80
 800084c:	0152      	lsls	r2, r2, #5
 800084e:	4313      	orrs	r3, r2
 8000850:	81a3      	strh	r3, [r4, #12]
 8000852:	6560      	str	r0, [r4, #84]	@ 0x54
 8000854:	e7f8      	b.n	8000848 <__sseek+0x18>
 8000856:	46c0      	nop			@ (mov r8, r8)
 8000858:	ffffefff 	.word	0xffffefff

0800085c <__sclose>:
 800085c:	b510      	push	{r4, lr}
 800085e:	230e      	movs	r3, #14
 8000860:	5ec9      	ldrsh	r1, [r1, r3]
 8000862:	f000 f8a9 	bl	80009b8 <_close_r>
 8000866:	bd10      	pop	{r4, pc}

08000868 <__swbuf_r>:
 8000868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800086a:	0006      	movs	r6, r0
 800086c:	000d      	movs	r5, r1
 800086e:	0014      	movs	r4, r2
 8000870:	2800      	cmp	r0, #0
 8000872:	d004      	beq.n	800087e <__swbuf_r+0x16>
 8000874:	6a03      	ldr	r3, [r0, #32]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d101      	bne.n	800087e <__swbuf_r+0x16>
 800087a:	f7ff ff15 	bl	80006a8 <__sinit>
 800087e:	69a3      	ldr	r3, [r4, #24]
 8000880:	60a3      	str	r3, [r4, #8]
 8000882:	89a3      	ldrh	r3, [r4, #12]
 8000884:	071b      	lsls	r3, r3, #28
 8000886:	d502      	bpl.n	800088e <__swbuf_r+0x26>
 8000888:	6923      	ldr	r3, [r4, #16]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d109      	bne.n	80008a2 <__swbuf_r+0x3a>
 800088e:	0021      	movs	r1, r4
 8000890:	0030      	movs	r0, r6
 8000892:	f000 f82b 	bl	80008ec <__swsetup_r>
 8000896:	2800      	cmp	r0, #0
 8000898:	d003      	beq.n	80008a2 <__swbuf_r+0x3a>
 800089a:	2501      	movs	r5, #1
 800089c:	426d      	negs	r5, r5
 800089e:	0028      	movs	r0, r5
 80008a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008a2:	6923      	ldr	r3, [r4, #16]
 80008a4:	6820      	ldr	r0, [r4, #0]
 80008a6:	b2ef      	uxtb	r7, r5
 80008a8:	1ac0      	subs	r0, r0, r3
 80008aa:	6963      	ldr	r3, [r4, #20]
 80008ac:	b2ed      	uxtb	r5, r5
 80008ae:	4283      	cmp	r3, r0
 80008b0:	dc05      	bgt.n	80008be <__swbuf_r+0x56>
 80008b2:	0021      	movs	r1, r4
 80008b4:	0030      	movs	r0, r6
 80008b6:	f000 fa7d 	bl	8000db4 <_fflush_r>
 80008ba:	2800      	cmp	r0, #0
 80008bc:	d1ed      	bne.n	800089a <__swbuf_r+0x32>
 80008be:	68a3      	ldr	r3, [r4, #8]
 80008c0:	3001      	adds	r0, #1
 80008c2:	3b01      	subs	r3, #1
 80008c4:	60a3      	str	r3, [r4, #8]
 80008c6:	6823      	ldr	r3, [r4, #0]
 80008c8:	1c5a      	adds	r2, r3, #1
 80008ca:	6022      	str	r2, [r4, #0]
 80008cc:	701f      	strb	r7, [r3, #0]
 80008ce:	6963      	ldr	r3, [r4, #20]
 80008d0:	4283      	cmp	r3, r0
 80008d2:	d004      	beq.n	80008de <__swbuf_r+0x76>
 80008d4:	89a3      	ldrh	r3, [r4, #12]
 80008d6:	07db      	lsls	r3, r3, #31
 80008d8:	d5e1      	bpl.n	800089e <__swbuf_r+0x36>
 80008da:	2d0a      	cmp	r5, #10
 80008dc:	d1df      	bne.n	800089e <__swbuf_r+0x36>
 80008de:	0021      	movs	r1, r4
 80008e0:	0030      	movs	r0, r6
 80008e2:	f000 fa67 	bl	8000db4 <_fflush_r>
 80008e6:	2800      	cmp	r0, #0
 80008e8:	d0d9      	beq.n	800089e <__swbuf_r+0x36>
 80008ea:	e7d6      	b.n	800089a <__swbuf_r+0x32>

080008ec <__swsetup_r>:
 80008ec:	4b2d      	ldr	r3, [pc, #180]	@ (80009a4 <__swsetup_r+0xb8>)
 80008ee:	b570      	push	{r4, r5, r6, lr}
 80008f0:	0005      	movs	r5, r0
 80008f2:	6818      	ldr	r0, [r3, #0]
 80008f4:	000c      	movs	r4, r1
 80008f6:	2800      	cmp	r0, #0
 80008f8:	d004      	beq.n	8000904 <__swsetup_r+0x18>
 80008fa:	6a03      	ldr	r3, [r0, #32]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d101      	bne.n	8000904 <__swsetup_r+0x18>
 8000900:	f7ff fed2 	bl	80006a8 <__sinit>
 8000904:	220c      	movs	r2, #12
 8000906:	5ea3      	ldrsh	r3, [r4, r2]
 8000908:	071a      	lsls	r2, r3, #28
 800090a:	d423      	bmi.n	8000954 <__swsetup_r+0x68>
 800090c:	06da      	lsls	r2, r3, #27
 800090e:	d407      	bmi.n	8000920 <__swsetup_r+0x34>
 8000910:	2209      	movs	r2, #9
 8000912:	602a      	str	r2, [r5, #0]
 8000914:	2240      	movs	r2, #64	@ 0x40
 8000916:	2001      	movs	r0, #1
 8000918:	4313      	orrs	r3, r2
 800091a:	81a3      	strh	r3, [r4, #12]
 800091c:	4240      	negs	r0, r0
 800091e:	e03a      	b.n	8000996 <__swsetup_r+0xaa>
 8000920:	075b      	lsls	r3, r3, #29
 8000922:	d513      	bpl.n	800094c <__swsetup_r+0x60>
 8000924:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000926:	2900      	cmp	r1, #0
 8000928:	d008      	beq.n	800093c <__swsetup_r+0x50>
 800092a:	0023      	movs	r3, r4
 800092c:	3344      	adds	r3, #68	@ 0x44
 800092e:	4299      	cmp	r1, r3
 8000930:	d002      	beq.n	8000938 <__swsetup_r+0x4c>
 8000932:	0028      	movs	r0, r5
 8000934:	f000 f8bc 	bl	8000ab0 <_free_r>
 8000938:	2300      	movs	r3, #0
 800093a:	6363      	str	r3, [r4, #52]	@ 0x34
 800093c:	2224      	movs	r2, #36	@ 0x24
 800093e:	89a3      	ldrh	r3, [r4, #12]
 8000940:	4393      	bics	r3, r2
 8000942:	81a3      	strh	r3, [r4, #12]
 8000944:	2300      	movs	r3, #0
 8000946:	6063      	str	r3, [r4, #4]
 8000948:	6923      	ldr	r3, [r4, #16]
 800094a:	6023      	str	r3, [r4, #0]
 800094c:	2308      	movs	r3, #8
 800094e:	89a2      	ldrh	r2, [r4, #12]
 8000950:	4313      	orrs	r3, r2
 8000952:	81a3      	strh	r3, [r4, #12]
 8000954:	6923      	ldr	r3, [r4, #16]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d10b      	bne.n	8000972 <__swsetup_r+0x86>
 800095a:	21a0      	movs	r1, #160	@ 0xa0
 800095c:	2280      	movs	r2, #128	@ 0x80
 800095e:	89a3      	ldrh	r3, [r4, #12]
 8000960:	0089      	lsls	r1, r1, #2
 8000962:	0092      	lsls	r2, r2, #2
 8000964:	400b      	ands	r3, r1
 8000966:	4293      	cmp	r3, r2
 8000968:	d003      	beq.n	8000972 <__swsetup_r+0x86>
 800096a:	0021      	movs	r1, r4
 800096c:	0028      	movs	r0, r5
 800096e:	f000 fa77 	bl	8000e60 <__smakebuf_r>
 8000972:	220c      	movs	r2, #12
 8000974:	5ea3      	ldrsh	r3, [r4, r2]
 8000976:	2101      	movs	r1, #1
 8000978:	001a      	movs	r2, r3
 800097a:	400a      	ands	r2, r1
 800097c:	420b      	tst	r3, r1
 800097e:	d00b      	beq.n	8000998 <__swsetup_r+0xac>
 8000980:	2200      	movs	r2, #0
 8000982:	60a2      	str	r2, [r4, #8]
 8000984:	6962      	ldr	r2, [r4, #20]
 8000986:	4252      	negs	r2, r2
 8000988:	61a2      	str	r2, [r4, #24]
 800098a:	2000      	movs	r0, #0
 800098c:	6922      	ldr	r2, [r4, #16]
 800098e:	4282      	cmp	r2, r0
 8000990:	d101      	bne.n	8000996 <__swsetup_r+0xaa>
 8000992:	061a      	lsls	r2, r3, #24
 8000994:	d4be      	bmi.n	8000914 <__swsetup_r+0x28>
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	0799      	lsls	r1, r3, #30
 800099a:	d400      	bmi.n	800099e <__swsetup_r+0xb2>
 800099c:	6962      	ldr	r2, [r4, #20]
 800099e:	60a2      	str	r2, [r4, #8]
 80009a0:	e7f3      	b.n	800098a <__swsetup_r+0x9e>
 80009a2:	46c0      	nop			@ (mov r8, r8)
 80009a4:	2000001c 	.word	0x2000001c

080009a8 <memset>:
 80009a8:	0003      	movs	r3, r0
 80009aa:	1882      	adds	r2, r0, r2
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d100      	bne.n	80009b2 <memset+0xa>
 80009b0:	4770      	bx	lr
 80009b2:	7019      	strb	r1, [r3, #0]
 80009b4:	3301      	adds	r3, #1
 80009b6:	e7f9      	b.n	80009ac <memset+0x4>

080009b8 <_close_r>:
 80009b8:	2300      	movs	r3, #0
 80009ba:	b570      	push	{r4, r5, r6, lr}
 80009bc:	4d06      	ldr	r5, [pc, #24]	@ (80009d8 <_close_r+0x20>)
 80009be:	0004      	movs	r4, r0
 80009c0:	0008      	movs	r0, r1
 80009c2:	602b      	str	r3, [r5, #0]
 80009c4:	f000 fb96 	bl	80010f4 <_close>
 80009c8:	1c43      	adds	r3, r0, #1
 80009ca:	d103      	bne.n	80009d4 <_close_r+0x1c>
 80009cc:	682b      	ldr	r3, [r5, #0]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d000      	beq.n	80009d4 <_close_r+0x1c>
 80009d2:	6023      	str	r3, [r4, #0]
 80009d4:	bd70      	pop	{r4, r5, r6, pc}
 80009d6:	46c0      	nop			@ (mov r8, r8)
 80009d8:	200001e4 	.word	0x200001e4

080009dc <_lseek_r>:
 80009dc:	b570      	push	{r4, r5, r6, lr}
 80009de:	0004      	movs	r4, r0
 80009e0:	0008      	movs	r0, r1
 80009e2:	0011      	movs	r1, r2
 80009e4:	001a      	movs	r2, r3
 80009e6:	2300      	movs	r3, #0
 80009e8:	4d05      	ldr	r5, [pc, #20]	@ (8000a00 <_lseek_r+0x24>)
 80009ea:	602b      	str	r3, [r5, #0]
 80009ec:	f000 fb43 	bl	8001076 <_lseek>
 80009f0:	1c43      	adds	r3, r0, #1
 80009f2:	d103      	bne.n	80009fc <_lseek_r+0x20>
 80009f4:	682b      	ldr	r3, [r5, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d000      	beq.n	80009fc <_lseek_r+0x20>
 80009fa:	6023      	str	r3, [r4, #0]
 80009fc:	bd70      	pop	{r4, r5, r6, pc}
 80009fe:	46c0      	nop			@ (mov r8, r8)
 8000a00:	200001e4 	.word	0x200001e4

08000a04 <_read_r>:
 8000a04:	b570      	push	{r4, r5, r6, lr}
 8000a06:	0004      	movs	r4, r0
 8000a08:	0008      	movs	r0, r1
 8000a0a:	0011      	movs	r1, r2
 8000a0c:	001a      	movs	r2, r3
 8000a0e:	2300      	movs	r3, #0
 8000a10:	4d05      	ldr	r5, [pc, #20]	@ (8000a28 <_read_r+0x24>)
 8000a12:	602b      	str	r3, [r5, #0]
 8000a14:	f000 fada 	bl	8000fcc <_read>
 8000a18:	1c43      	adds	r3, r0, #1
 8000a1a:	d103      	bne.n	8000a24 <_read_r+0x20>
 8000a1c:	682b      	ldr	r3, [r5, #0]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d000      	beq.n	8000a24 <_read_r+0x20>
 8000a22:	6023      	str	r3, [r4, #0]
 8000a24:	bd70      	pop	{r4, r5, r6, pc}
 8000a26:	46c0      	nop			@ (mov r8, r8)
 8000a28:	200001e4 	.word	0x200001e4

08000a2c <_write_r>:
 8000a2c:	b570      	push	{r4, r5, r6, lr}
 8000a2e:	0004      	movs	r4, r0
 8000a30:	0008      	movs	r0, r1
 8000a32:	0011      	movs	r1, r2
 8000a34:	001a      	movs	r2, r3
 8000a36:	2300      	movs	r3, #0
 8000a38:	4d05      	ldr	r5, [pc, #20]	@ (8000a50 <_write_r+0x24>)
 8000a3a:	602b      	str	r3, [r5, #0]
 8000a3c:	f000 fb2f 	bl	800109e <_write>
 8000a40:	1c43      	adds	r3, r0, #1
 8000a42:	d103      	bne.n	8000a4c <_write_r+0x20>
 8000a44:	682b      	ldr	r3, [r5, #0]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d000      	beq.n	8000a4c <_write_r+0x20>
 8000a4a:	6023      	str	r3, [r4, #0]
 8000a4c:	bd70      	pop	{r4, r5, r6, pc}
 8000a4e:	46c0      	nop			@ (mov r8, r8)
 8000a50:	200001e4 	.word	0x200001e4

08000a54 <__errno>:
 8000a54:	4b01      	ldr	r3, [pc, #4]	@ (8000a5c <__errno+0x8>)
 8000a56:	6818      	ldr	r0, [r3, #0]
 8000a58:	4770      	bx	lr
 8000a5a:	46c0      	nop			@ (mov r8, r8)
 8000a5c:	2000001c 	.word	0x2000001c

08000a60 <__libc_init_array>:
 8000a60:	b570      	push	{r4, r5, r6, lr}
 8000a62:	2600      	movs	r6, #0
 8000a64:	4c0c      	ldr	r4, [pc, #48]	@ (8000a98 <__libc_init_array+0x38>)
 8000a66:	4d0d      	ldr	r5, [pc, #52]	@ (8000a9c <__libc_init_array+0x3c>)
 8000a68:	1b64      	subs	r4, r4, r5
 8000a6a:	10a4      	asrs	r4, r4, #2
 8000a6c:	42a6      	cmp	r6, r4
 8000a6e:	d109      	bne.n	8000a84 <__libc_init_array+0x24>
 8000a70:	2600      	movs	r6, #0
 8000a72:	f000 fd03 	bl	800147c <_init>
 8000a76:	4c0a      	ldr	r4, [pc, #40]	@ (8000aa0 <__libc_init_array+0x40>)
 8000a78:	4d0a      	ldr	r5, [pc, #40]	@ (8000aa4 <__libc_init_array+0x44>)
 8000a7a:	1b64      	subs	r4, r4, r5
 8000a7c:	10a4      	asrs	r4, r4, #2
 8000a7e:	42a6      	cmp	r6, r4
 8000a80:	d105      	bne.n	8000a8e <__libc_init_array+0x2e>
 8000a82:	bd70      	pop	{r4, r5, r6, pc}
 8000a84:	00b3      	lsls	r3, r6, #2
 8000a86:	58eb      	ldr	r3, [r5, r3]
 8000a88:	4798      	blx	r3
 8000a8a:	3601      	adds	r6, #1
 8000a8c:	e7ee      	b.n	8000a6c <__libc_init_array+0xc>
 8000a8e:	00b3      	lsls	r3, r6, #2
 8000a90:	58eb      	ldr	r3, [r5, r3]
 8000a92:	4798      	blx	r3
 8000a94:	3601      	adds	r6, #1
 8000a96:	e7f2      	b.n	8000a7e <__libc_init_array+0x1e>
 8000a98:	080014f0 	.word	0x080014f0
 8000a9c:	080014f0 	.word	0x080014f0
 8000aa0:	080014f4 	.word	0x080014f4
 8000aa4:	080014f0 	.word	0x080014f0

08000aa8 <__retarget_lock_init_recursive>:
 8000aa8:	4770      	bx	lr

08000aaa <__retarget_lock_acquire_recursive>:
 8000aaa:	4770      	bx	lr

08000aac <__retarget_lock_release_recursive>:
 8000aac:	4770      	bx	lr
	...

08000ab0 <_free_r>:
 8000ab0:	b570      	push	{r4, r5, r6, lr}
 8000ab2:	0005      	movs	r5, r0
 8000ab4:	1e0c      	subs	r4, r1, #0
 8000ab6:	d010      	beq.n	8000ada <_free_r+0x2a>
 8000ab8:	3c04      	subs	r4, #4
 8000aba:	6823      	ldr	r3, [r4, #0]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	da00      	bge.n	8000ac2 <_free_r+0x12>
 8000ac0:	18e4      	adds	r4, r4, r3
 8000ac2:	0028      	movs	r0, r5
 8000ac4:	f000 f8e0 	bl	8000c88 <__malloc_lock>
 8000ac8:	4a1d      	ldr	r2, [pc, #116]	@ (8000b40 <_free_r+0x90>)
 8000aca:	6813      	ldr	r3, [r2, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d105      	bne.n	8000adc <_free_r+0x2c>
 8000ad0:	6063      	str	r3, [r4, #4]
 8000ad2:	6014      	str	r4, [r2, #0]
 8000ad4:	0028      	movs	r0, r5
 8000ad6:	f000 f8df 	bl	8000c98 <__malloc_unlock>
 8000ada:	bd70      	pop	{r4, r5, r6, pc}
 8000adc:	42a3      	cmp	r3, r4
 8000ade:	d908      	bls.n	8000af2 <_free_r+0x42>
 8000ae0:	6820      	ldr	r0, [r4, #0]
 8000ae2:	1821      	adds	r1, r4, r0
 8000ae4:	428b      	cmp	r3, r1
 8000ae6:	d1f3      	bne.n	8000ad0 <_free_r+0x20>
 8000ae8:	6819      	ldr	r1, [r3, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	1809      	adds	r1, r1, r0
 8000aee:	6021      	str	r1, [r4, #0]
 8000af0:	e7ee      	b.n	8000ad0 <_free_r+0x20>
 8000af2:	001a      	movs	r2, r3
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <_free_r+0x4e>
 8000afa:	42a3      	cmp	r3, r4
 8000afc:	d9f9      	bls.n	8000af2 <_free_r+0x42>
 8000afe:	6811      	ldr	r1, [r2, #0]
 8000b00:	1850      	adds	r0, r2, r1
 8000b02:	42a0      	cmp	r0, r4
 8000b04:	d10b      	bne.n	8000b1e <_free_r+0x6e>
 8000b06:	6820      	ldr	r0, [r4, #0]
 8000b08:	1809      	adds	r1, r1, r0
 8000b0a:	1850      	adds	r0, r2, r1
 8000b0c:	6011      	str	r1, [r2, #0]
 8000b0e:	4283      	cmp	r3, r0
 8000b10:	d1e0      	bne.n	8000ad4 <_free_r+0x24>
 8000b12:	6818      	ldr	r0, [r3, #0]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	1841      	adds	r1, r0, r1
 8000b18:	6011      	str	r1, [r2, #0]
 8000b1a:	6053      	str	r3, [r2, #4]
 8000b1c:	e7da      	b.n	8000ad4 <_free_r+0x24>
 8000b1e:	42a0      	cmp	r0, r4
 8000b20:	d902      	bls.n	8000b28 <_free_r+0x78>
 8000b22:	230c      	movs	r3, #12
 8000b24:	602b      	str	r3, [r5, #0]
 8000b26:	e7d5      	b.n	8000ad4 <_free_r+0x24>
 8000b28:	6820      	ldr	r0, [r4, #0]
 8000b2a:	1821      	adds	r1, r4, r0
 8000b2c:	428b      	cmp	r3, r1
 8000b2e:	d103      	bne.n	8000b38 <_free_r+0x88>
 8000b30:	6819      	ldr	r1, [r3, #0]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	1809      	adds	r1, r1, r0
 8000b36:	6021      	str	r1, [r4, #0]
 8000b38:	6063      	str	r3, [r4, #4]
 8000b3a:	6054      	str	r4, [r2, #4]
 8000b3c:	e7ca      	b.n	8000ad4 <_free_r+0x24>
 8000b3e:	46c0      	nop			@ (mov r8, r8)
 8000b40:	200001f0 	.word	0x200001f0

08000b44 <sbrk_aligned>:
 8000b44:	b570      	push	{r4, r5, r6, lr}
 8000b46:	4e0f      	ldr	r6, [pc, #60]	@ (8000b84 <sbrk_aligned+0x40>)
 8000b48:	000d      	movs	r5, r1
 8000b4a:	6831      	ldr	r1, [r6, #0]
 8000b4c:	0004      	movs	r4, r0
 8000b4e:	2900      	cmp	r1, #0
 8000b50:	d102      	bne.n	8000b58 <sbrk_aligned+0x14>
 8000b52:	f000 f9eb 	bl	8000f2c <_sbrk_r>
 8000b56:	6030      	str	r0, [r6, #0]
 8000b58:	0029      	movs	r1, r5
 8000b5a:	0020      	movs	r0, r4
 8000b5c:	f000 f9e6 	bl	8000f2c <_sbrk_r>
 8000b60:	1c43      	adds	r3, r0, #1
 8000b62:	d103      	bne.n	8000b6c <sbrk_aligned+0x28>
 8000b64:	2501      	movs	r5, #1
 8000b66:	426d      	negs	r5, r5
 8000b68:	0028      	movs	r0, r5
 8000b6a:	bd70      	pop	{r4, r5, r6, pc}
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	1cc5      	adds	r5, r0, #3
 8000b70:	439d      	bics	r5, r3
 8000b72:	42a8      	cmp	r0, r5
 8000b74:	d0f8      	beq.n	8000b68 <sbrk_aligned+0x24>
 8000b76:	1a29      	subs	r1, r5, r0
 8000b78:	0020      	movs	r0, r4
 8000b7a:	f000 f9d7 	bl	8000f2c <_sbrk_r>
 8000b7e:	3001      	adds	r0, #1
 8000b80:	d1f2      	bne.n	8000b68 <sbrk_aligned+0x24>
 8000b82:	e7ef      	b.n	8000b64 <sbrk_aligned+0x20>
 8000b84:	200001ec 	.word	0x200001ec

08000b88 <_malloc_r>:
 8000b88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000b8a:	2203      	movs	r2, #3
 8000b8c:	1ccb      	adds	r3, r1, #3
 8000b8e:	4393      	bics	r3, r2
 8000b90:	3308      	adds	r3, #8
 8000b92:	0005      	movs	r5, r0
 8000b94:	001f      	movs	r7, r3
 8000b96:	2b0c      	cmp	r3, #12
 8000b98:	d234      	bcs.n	8000c04 <_malloc_r+0x7c>
 8000b9a:	270c      	movs	r7, #12
 8000b9c:	42b9      	cmp	r1, r7
 8000b9e:	d833      	bhi.n	8000c08 <_malloc_r+0x80>
 8000ba0:	0028      	movs	r0, r5
 8000ba2:	f000 f871 	bl	8000c88 <__malloc_lock>
 8000ba6:	4e37      	ldr	r6, [pc, #220]	@ (8000c84 <_malloc_r+0xfc>)
 8000ba8:	6833      	ldr	r3, [r6, #0]
 8000baa:	001c      	movs	r4, r3
 8000bac:	2c00      	cmp	r4, #0
 8000bae:	d12f      	bne.n	8000c10 <_malloc_r+0x88>
 8000bb0:	0039      	movs	r1, r7
 8000bb2:	0028      	movs	r0, r5
 8000bb4:	f7ff ffc6 	bl	8000b44 <sbrk_aligned>
 8000bb8:	0004      	movs	r4, r0
 8000bba:	1c43      	adds	r3, r0, #1
 8000bbc:	d15f      	bne.n	8000c7e <_malloc_r+0xf6>
 8000bbe:	6834      	ldr	r4, [r6, #0]
 8000bc0:	9400      	str	r4, [sp, #0]
 8000bc2:	9b00      	ldr	r3, [sp, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d14a      	bne.n	8000c5e <_malloc_r+0xd6>
 8000bc8:	2c00      	cmp	r4, #0
 8000bca:	d052      	beq.n	8000c72 <_malloc_r+0xea>
 8000bcc:	6823      	ldr	r3, [r4, #0]
 8000bce:	0028      	movs	r0, r5
 8000bd0:	18e3      	adds	r3, r4, r3
 8000bd2:	9900      	ldr	r1, [sp, #0]
 8000bd4:	9301      	str	r3, [sp, #4]
 8000bd6:	f000 f9a9 	bl	8000f2c <_sbrk_r>
 8000bda:	9b01      	ldr	r3, [sp, #4]
 8000bdc:	4283      	cmp	r3, r0
 8000bde:	d148      	bne.n	8000c72 <_malloc_r+0xea>
 8000be0:	6823      	ldr	r3, [r4, #0]
 8000be2:	0028      	movs	r0, r5
 8000be4:	1aff      	subs	r7, r7, r3
 8000be6:	0039      	movs	r1, r7
 8000be8:	f7ff ffac 	bl	8000b44 <sbrk_aligned>
 8000bec:	3001      	adds	r0, #1
 8000bee:	d040      	beq.n	8000c72 <_malloc_r+0xea>
 8000bf0:	6823      	ldr	r3, [r4, #0]
 8000bf2:	19db      	adds	r3, r3, r7
 8000bf4:	6023      	str	r3, [r4, #0]
 8000bf6:	6833      	ldr	r3, [r6, #0]
 8000bf8:	685a      	ldr	r2, [r3, #4]
 8000bfa:	2a00      	cmp	r2, #0
 8000bfc:	d133      	bne.n	8000c66 <_malloc_r+0xde>
 8000bfe:	9b00      	ldr	r3, [sp, #0]
 8000c00:	6033      	str	r3, [r6, #0]
 8000c02:	e019      	b.n	8000c38 <_malloc_r+0xb0>
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	dac9      	bge.n	8000b9c <_malloc_r+0x14>
 8000c08:	230c      	movs	r3, #12
 8000c0a:	602b      	str	r3, [r5, #0]
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000c10:	6821      	ldr	r1, [r4, #0]
 8000c12:	1bc9      	subs	r1, r1, r7
 8000c14:	d420      	bmi.n	8000c58 <_malloc_r+0xd0>
 8000c16:	290b      	cmp	r1, #11
 8000c18:	d90a      	bls.n	8000c30 <_malloc_r+0xa8>
 8000c1a:	19e2      	adds	r2, r4, r7
 8000c1c:	6027      	str	r7, [r4, #0]
 8000c1e:	42a3      	cmp	r3, r4
 8000c20:	d104      	bne.n	8000c2c <_malloc_r+0xa4>
 8000c22:	6032      	str	r2, [r6, #0]
 8000c24:	6863      	ldr	r3, [r4, #4]
 8000c26:	6011      	str	r1, [r2, #0]
 8000c28:	6053      	str	r3, [r2, #4]
 8000c2a:	e005      	b.n	8000c38 <_malloc_r+0xb0>
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	e7f9      	b.n	8000c24 <_malloc_r+0x9c>
 8000c30:	6862      	ldr	r2, [r4, #4]
 8000c32:	42a3      	cmp	r3, r4
 8000c34:	d10e      	bne.n	8000c54 <_malloc_r+0xcc>
 8000c36:	6032      	str	r2, [r6, #0]
 8000c38:	0028      	movs	r0, r5
 8000c3a:	f000 f82d 	bl	8000c98 <__malloc_unlock>
 8000c3e:	0020      	movs	r0, r4
 8000c40:	2207      	movs	r2, #7
 8000c42:	300b      	adds	r0, #11
 8000c44:	1d23      	adds	r3, r4, #4
 8000c46:	4390      	bics	r0, r2
 8000c48:	1ac2      	subs	r2, r0, r3
 8000c4a:	4298      	cmp	r0, r3
 8000c4c:	d0df      	beq.n	8000c0e <_malloc_r+0x86>
 8000c4e:	1a1b      	subs	r3, r3, r0
 8000c50:	50a3      	str	r3, [r4, r2]
 8000c52:	e7dc      	b.n	8000c0e <_malloc_r+0x86>
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	e7ef      	b.n	8000c38 <_malloc_r+0xb0>
 8000c58:	0023      	movs	r3, r4
 8000c5a:	6864      	ldr	r4, [r4, #4]
 8000c5c:	e7a6      	b.n	8000bac <_malloc_r+0x24>
 8000c5e:	9c00      	ldr	r4, [sp, #0]
 8000c60:	6863      	ldr	r3, [r4, #4]
 8000c62:	9300      	str	r3, [sp, #0]
 8000c64:	e7ad      	b.n	8000bc2 <_malloc_r+0x3a>
 8000c66:	001a      	movs	r2, r3
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	42a3      	cmp	r3, r4
 8000c6c:	d1fb      	bne.n	8000c66 <_malloc_r+0xde>
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e7da      	b.n	8000c28 <_malloc_r+0xa0>
 8000c72:	230c      	movs	r3, #12
 8000c74:	0028      	movs	r0, r5
 8000c76:	602b      	str	r3, [r5, #0]
 8000c78:	f000 f80e 	bl	8000c98 <__malloc_unlock>
 8000c7c:	e7c6      	b.n	8000c0c <_malloc_r+0x84>
 8000c7e:	6007      	str	r7, [r0, #0]
 8000c80:	e7da      	b.n	8000c38 <_malloc_r+0xb0>
 8000c82:	46c0      	nop			@ (mov r8, r8)
 8000c84:	200001f0 	.word	0x200001f0

08000c88 <__malloc_lock>:
 8000c88:	b510      	push	{r4, lr}
 8000c8a:	4802      	ldr	r0, [pc, #8]	@ (8000c94 <__malloc_lock+0xc>)
 8000c8c:	f7ff ff0d 	bl	8000aaa <__retarget_lock_acquire_recursive>
 8000c90:	bd10      	pop	{r4, pc}
 8000c92:	46c0      	nop			@ (mov r8, r8)
 8000c94:	200001e8 	.word	0x200001e8

08000c98 <__malloc_unlock>:
 8000c98:	b510      	push	{r4, lr}
 8000c9a:	4802      	ldr	r0, [pc, #8]	@ (8000ca4 <__malloc_unlock+0xc>)
 8000c9c:	f7ff ff06 	bl	8000aac <__retarget_lock_release_recursive>
 8000ca0:	bd10      	pop	{r4, pc}
 8000ca2:	46c0      	nop			@ (mov r8, r8)
 8000ca4:	200001e8 	.word	0x200001e8

08000ca8 <__sflush_r>:
 8000ca8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000caa:	220c      	movs	r2, #12
 8000cac:	5e8b      	ldrsh	r3, [r1, r2]
 8000cae:	0005      	movs	r5, r0
 8000cb0:	000c      	movs	r4, r1
 8000cb2:	071a      	lsls	r2, r3, #28
 8000cb4:	d456      	bmi.n	8000d64 <__sflush_r+0xbc>
 8000cb6:	684a      	ldr	r2, [r1, #4]
 8000cb8:	2a00      	cmp	r2, #0
 8000cba:	dc02      	bgt.n	8000cc2 <__sflush_r+0x1a>
 8000cbc:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8000cbe:	2a00      	cmp	r2, #0
 8000cc0:	dd4e      	ble.n	8000d60 <__sflush_r+0xb8>
 8000cc2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8000cc4:	2f00      	cmp	r7, #0
 8000cc6:	d04b      	beq.n	8000d60 <__sflush_r+0xb8>
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2080      	movs	r0, #128	@ 0x80
 8000ccc:	682e      	ldr	r6, [r5, #0]
 8000cce:	602a      	str	r2, [r5, #0]
 8000cd0:	001a      	movs	r2, r3
 8000cd2:	0140      	lsls	r0, r0, #5
 8000cd4:	6a21      	ldr	r1, [r4, #32]
 8000cd6:	4002      	ands	r2, r0
 8000cd8:	4203      	tst	r3, r0
 8000cda:	d033      	beq.n	8000d44 <__sflush_r+0x9c>
 8000cdc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000cde:	89a3      	ldrh	r3, [r4, #12]
 8000ce0:	075b      	lsls	r3, r3, #29
 8000ce2:	d506      	bpl.n	8000cf2 <__sflush_r+0x4a>
 8000ce4:	6863      	ldr	r3, [r4, #4]
 8000ce6:	1ad2      	subs	r2, r2, r3
 8000ce8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <__sflush_r+0x4a>
 8000cee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000cf0:	1ad2      	subs	r2, r2, r3
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	0028      	movs	r0, r5
 8000cf6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8000cf8:	6a21      	ldr	r1, [r4, #32]
 8000cfa:	47b8      	blx	r7
 8000cfc:	89a2      	ldrh	r2, [r4, #12]
 8000cfe:	1c43      	adds	r3, r0, #1
 8000d00:	d106      	bne.n	8000d10 <__sflush_r+0x68>
 8000d02:	6829      	ldr	r1, [r5, #0]
 8000d04:	291d      	cmp	r1, #29
 8000d06:	d846      	bhi.n	8000d96 <__sflush_r+0xee>
 8000d08:	4b29      	ldr	r3, [pc, #164]	@ (8000db0 <__sflush_r+0x108>)
 8000d0a:	40cb      	lsrs	r3, r1
 8000d0c:	07db      	lsls	r3, r3, #31
 8000d0e:	d542      	bpl.n	8000d96 <__sflush_r+0xee>
 8000d10:	2300      	movs	r3, #0
 8000d12:	6063      	str	r3, [r4, #4]
 8000d14:	6923      	ldr	r3, [r4, #16]
 8000d16:	6023      	str	r3, [r4, #0]
 8000d18:	04d2      	lsls	r2, r2, #19
 8000d1a:	d505      	bpl.n	8000d28 <__sflush_r+0x80>
 8000d1c:	1c43      	adds	r3, r0, #1
 8000d1e:	d102      	bne.n	8000d26 <__sflush_r+0x7e>
 8000d20:	682b      	ldr	r3, [r5, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d100      	bne.n	8000d28 <__sflush_r+0x80>
 8000d26:	6560      	str	r0, [r4, #84]	@ 0x54
 8000d28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000d2a:	602e      	str	r6, [r5, #0]
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	d017      	beq.n	8000d60 <__sflush_r+0xb8>
 8000d30:	0023      	movs	r3, r4
 8000d32:	3344      	adds	r3, #68	@ 0x44
 8000d34:	4299      	cmp	r1, r3
 8000d36:	d002      	beq.n	8000d3e <__sflush_r+0x96>
 8000d38:	0028      	movs	r0, r5
 8000d3a:	f7ff feb9 	bl	8000ab0 <_free_r>
 8000d3e:	2300      	movs	r3, #0
 8000d40:	6363      	str	r3, [r4, #52]	@ 0x34
 8000d42:	e00d      	b.n	8000d60 <__sflush_r+0xb8>
 8000d44:	2301      	movs	r3, #1
 8000d46:	0028      	movs	r0, r5
 8000d48:	47b8      	blx	r7
 8000d4a:	0002      	movs	r2, r0
 8000d4c:	1c43      	adds	r3, r0, #1
 8000d4e:	d1c6      	bne.n	8000cde <__sflush_r+0x36>
 8000d50:	682b      	ldr	r3, [r5, #0]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d0c3      	beq.n	8000cde <__sflush_r+0x36>
 8000d56:	2b1d      	cmp	r3, #29
 8000d58:	d001      	beq.n	8000d5e <__sflush_r+0xb6>
 8000d5a:	2b16      	cmp	r3, #22
 8000d5c:	d11a      	bne.n	8000d94 <__sflush_r+0xec>
 8000d5e:	602e      	str	r6, [r5, #0]
 8000d60:	2000      	movs	r0, #0
 8000d62:	e01e      	b.n	8000da2 <__sflush_r+0xfa>
 8000d64:	690e      	ldr	r6, [r1, #16]
 8000d66:	2e00      	cmp	r6, #0
 8000d68:	d0fa      	beq.n	8000d60 <__sflush_r+0xb8>
 8000d6a:	680f      	ldr	r7, [r1, #0]
 8000d6c:	600e      	str	r6, [r1, #0]
 8000d6e:	1bba      	subs	r2, r7, r6
 8000d70:	9201      	str	r2, [sp, #4]
 8000d72:	2200      	movs	r2, #0
 8000d74:	079b      	lsls	r3, r3, #30
 8000d76:	d100      	bne.n	8000d7a <__sflush_r+0xd2>
 8000d78:	694a      	ldr	r2, [r1, #20]
 8000d7a:	60a2      	str	r2, [r4, #8]
 8000d7c:	9b01      	ldr	r3, [sp, #4]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	ddee      	ble.n	8000d60 <__sflush_r+0xb8>
 8000d82:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8000d84:	0032      	movs	r2, r6
 8000d86:	001f      	movs	r7, r3
 8000d88:	0028      	movs	r0, r5
 8000d8a:	9b01      	ldr	r3, [sp, #4]
 8000d8c:	6a21      	ldr	r1, [r4, #32]
 8000d8e:	47b8      	blx	r7
 8000d90:	2800      	cmp	r0, #0
 8000d92:	dc07      	bgt.n	8000da4 <__sflush_r+0xfc>
 8000d94:	89a2      	ldrh	r2, [r4, #12]
 8000d96:	2340      	movs	r3, #64	@ 0x40
 8000d98:	2001      	movs	r0, #1
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	b21b      	sxth	r3, r3
 8000d9e:	81a3      	strh	r3, [r4, #12]
 8000da0:	4240      	negs	r0, r0
 8000da2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000da4:	9b01      	ldr	r3, [sp, #4]
 8000da6:	1836      	adds	r6, r6, r0
 8000da8:	1a1b      	subs	r3, r3, r0
 8000daa:	9301      	str	r3, [sp, #4]
 8000dac:	e7e6      	b.n	8000d7c <__sflush_r+0xd4>
 8000dae:	46c0      	nop			@ (mov r8, r8)
 8000db0:	20400001 	.word	0x20400001

08000db4 <_fflush_r>:
 8000db4:	690b      	ldr	r3, [r1, #16]
 8000db6:	b570      	push	{r4, r5, r6, lr}
 8000db8:	0005      	movs	r5, r0
 8000dba:	000c      	movs	r4, r1
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d102      	bne.n	8000dc6 <_fflush_r+0x12>
 8000dc0:	2500      	movs	r5, #0
 8000dc2:	0028      	movs	r0, r5
 8000dc4:	bd70      	pop	{r4, r5, r6, pc}
 8000dc6:	2800      	cmp	r0, #0
 8000dc8:	d004      	beq.n	8000dd4 <_fflush_r+0x20>
 8000dca:	6a03      	ldr	r3, [r0, #32]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d101      	bne.n	8000dd4 <_fflush_r+0x20>
 8000dd0:	f7ff fc6a 	bl	80006a8 <__sinit>
 8000dd4:	220c      	movs	r2, #12
 8000dd6:	5ea3      	ldrsh	r3, [r4, r2]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d0f1      	beq.n	8000dc0 <_fflush_r+0xc>
 8000ddc:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8000dde:	07d2      	lsls	r2, r2, #31
 8000de0:	d404      	bmi.n	8000dec <_fflush_r+0x38>
 8000de2:	059b      	lsls	r3, r3, #22
 8000de4:	d402      	bmi.n	8000dec <_fflush_r+0x38>
 8000de6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000de8:	f7ff fe5f 	bl	8000aaa <__retarget_lock_acquire_recursive>
 8000dec:	0028      	movs	r0, r5
 8000dee:	0021      	movs	r1, r4
 8000df0:	f7ff ff5a 	bl	8000ca8 <__sflush_r>
 8000df4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000df6:	0005      	movs	r5, r0
 8000df8:	07db      	lsls	r3, r3, #31
 8000dfa:	d4e2      	bmi.n	8000dc2 <_fflush_r+0xe>
 8000dfc:	89a3      	ldrh	r3, [r4, #12]
 8000dfe:	059b      	lsls	r3, r3, #22
 8000e00:	d4df      	bmi.n	8000dc2 <_fflush_r+0xe>
 8000e02:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000e04:	f7ff fe52 	bl	8000aac <__retarget_lock_release_recursive>
 8000e08:	e7db      	b.n	8000dc2 <_fflush_r+0xe>
	...

08000e0c <__swhatbuf_r>:
 8000e0c:	b570      	push	{r4, r5, r6, lr}
 8000e0e:	000e      	movs	r6, r1
 8000e10:	001d      	movs	r5, r3
 8000e12:	230e      	movs	r3, #14
 8000e14:	5ec9      	ldrsh	r1, [r1, r3]
 8000e16:	0014      	movs	r4, r2
 8000e18:	b096      	sub	sp, #88	@ 0x58
 8000e1a:	2900      	cmp	r1, #0
 8000e1c:	da0c      	bge.n	8000e38 <__swhatbuf_r+0x2c>
 8000e1e:	89b2      	ldrh	r2, [r6, #12]
 8000e20:	2380      	movs	r3, #128	@ 0x80
 8000e22:	0011      	movs	r1, r2
 8000e24:	4019      	ands	r1, r3
 8000e26:	421a      	tst	r2, r3
 8000e28:	d114      	bne.n	8000e54 <__swhatbuf_r+0x48>
 8000e2a:	2380      	movs	r3, #128	@ 0x80
 8000e2c:	00db      	lsls	r3, r3, #3
 8000e2e:	2000      	movs	r0, #0
 8000e30:	6029      	str	r1, [r5, #0]
 8000e32:	6023      	str	r3, [r4, #0]
 8000e34:	b016      	add	sp, #88	@ 0x58
 8000e36:	bd70      	pop	{r4, r5, r6, pc}
 8000e38:	466a      	mov	r2, sp
 8000e3a:	f000 f853 	bl	8000ee4 <_fstat_r>
 8000e3e:	2800      	cmp	r0, #0
 8000e40:	dbed      	blt.n	8000e1e <__swhatbuf_r+0x12>
 8000e42:	23f0      	movs	r3, #240	@ 0xf0
 8000e44:	9901      	ldr	r1, [sp, #4]
 8000e46:	021b      	lsls	r3, r3, #8
 8000e48:	4019      	ands	r1, r3
 8000e4a:	4b04      	ldr	r3, [pc, #16]	@ (8000e5c <__swhatbuf_r+0x50>)
 8000e4c:	18c9      	adds	r1, r1, r3
 8000e4e:	424b      	negs	r3, r1
 8000e50:	4159      	adcs	r1, r3
 8000e52:	e7ea      	b.n	8000e2a <__swhatbuf_r+0x1e>
 8000e54:	2100      	movs	r1, #0
 8000e56:	2340      	movs	r3, #64	@ 0x40
 8000e58:	e7e9      	b.n	8000e2e <__swhatbuf_r+0x22>
 8000e5a:	46c0      	nop			@ (mov r8, r8)
 8000e5c:	ffffe000 	.word	0xffffe000

08000e60 <__smakebuf_r>:
 8000e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e62:	2602      	movs	r6, #2
 8000e64:	898b      	ldrh	r3, [r1, #12]
 8000e66:	0005      	movs	r5, r0
 8000e68:	000c      	movs	r4, r1
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	4233      	tst	r3, r6
 8000e6e:	d007      	beq.n	8000e80 <__smakebuf_r+0x20>
 8000e70:	0023      	movs	r3, r4
 8000e72:	3347      	adds	r3, #71	@ 0x47
 8000e74:	6023      	str	r3, [r4, #0]
 8000e76:	6123      	str	r3, [r4, #16]
 8000e78:	2301      	movs	r3, #1
 8000e7a:	6163      	str	r3, [r4, #20]
 8000e7c:	b005      	add	sp, #20
 8000e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e80:	ab03      	add	r3, sp, #12
 8000e82:	aa02      	add	r2, sp, #8
 8000e84:	f7ff ffc2 	bl	8000e0c <__swhatbuf_r>
 8000e88:	9f02      	ldr	r7, [sp, #8]
 8000e8a:	9001      	str	r0, [sp, #4]
 8000e8c:	0039      	movs	r1, r7
 8000e8e:	0028      	movs	r0, r5
 8000e90:	f7ff fe7a 	bl	8000b88 <_malloc_r>
 8000e94:	2800      	cmp	r0, #0
 8000e96:	d108      	bne.n	8000eaa <__smakebuf_r+0x4a>
 8000e98:	220c      	movs	r2, #12
 8000e9a:	5ea3      	ldrsh	r3, [r4, r2]
 8000e9c:	059a      	lsls	r2, r3, #22
 8000e9e:	d4ed      	bmi.n	8000e7c <__smakebuf_r+0x1c>
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	4393      	bics	r3, r2
 8000ea4:	431e      	orrs	r6, r3
 8000ea6:	81a6      	strh	r6, [r4, #12]
 8000ea8:	e7e2      	b.n	8000e70 <__smakebuf_r+0x10>
 8000eaa:	2380      	movs	r3, #128	@ 0x80
 8000eac:	89a2      	ldrh	r2, [r4, #12]
 8000eae:	6020      	str	r0, [r4, #0]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	81a3      	strh	r3, [r4, #12]
 8000eb4:	9b03      	ldr	r3, [sp, #12]
 8000eb6:	6120      	str	r0, [r4, #16]
 8000eb8:	6167      	str	r7, [r4, #20]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d00c      	beq.n	8000ed8 <__smakebuf_r+0x78>
 8000ebe:	0028      	movs	r0, r5
 8000ec0:	230e      	movs	r3, #14
 8000ec2:	5ee1      	ldrsh	r1, [r4, r3]
 8000ec4:	f000 f820 	bl	8000f08 <_isatty_r>
 8000ec8:	2800      	cmp	r0, #0
 8000eca:	d005      	beq.n	8000ed8 <__smakebuf_r+0x78>
 8000ecc:	2303      	movs	r3, #3
 8000ece:	89a2      	ldrh	r2, [r4, #12]
 8000ed0:	439a      	bics	r2, r3
 8000ed2:	3b02      	subs	r3, #2
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	81a3      	strh	r3, [r4, #12]
 8000ed8:	89a3      	ldrh	r3, [r4, #12]
 8000eda:	9a01      	ldr	r2, [sp, #4]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	81a3      	strh	r3, [r4, #12]
 8000ee0:	e7cc      	b.n	8000e7c <__smakebuf_r+0x1c>
	...

08000ee4 <_fstat_r>:
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	b570      	push	{r4, r5, r6, lr}
 8000ee8:	4d06      	ldr	r5, [pc, #24]	@ (8000f04 <_fstat_r+0x20>)
 8000eea:	0004      	movs	r4, r0
 8000eec:	0008      	movs	r0, r1
 8000eee:	0011      	movs	r1, r2
 8000ef0:	602b      	str	r3, [r5, #0]
 8000ef2:	f000 f947 	bl	8001184 <_fstat>
 8000ef6:	1c43      	adds	r3, r0, #1
 8000ef8:	d103      	bne.n	8000f02 <_fstat_r+0x1e>
 8000efa:	682b      	ldr	r3, [r5, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d000      	beq.n	8000f02 <_fstat_r+0x1e>
 8000f00:	6023      	str	r3, [r4, #0]
 8000f02:	bd70      	pop	{r4, r5, r6, pc}
 8000f04:	200001e4 	.word	0x200001e4

08000f08 <_isatty_r>:
 8000f08:	2300      	movs	r3, #0
 8000f0a:	b570      	push	{r4, r5, r6, lr}
 8000f0c:	4d06      	ldr	r5, [pc, #24]	@ (8000f28 <_isatty_r+0x20>)
 8000f0e:	0004      	movs	r4, r0
 8000f10:	0008      	movs	r0, r1
 8000f12:	602b      	str	r3, [r5, #0]
 8000f14:	f000 fa94 	bl	8001440 <_isatty>
 8000f18:	1c43      	adds	r3, r0, #1
 8000f1a:	d103      	bne.n	8000f24 <_isatty_r+0x1c>
 8000f1c:	682b      	ldr	r3, [r5, #0]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d000      	beq.n	8000f24 <_isatty_r+0x1c>
 8000f22:	6023      	str	r3, [r4, #0]
 8000f24:	bd70      	pop	{r4, r5, r6, pc}
 8000f26:	46c0      	nop			@ (mov r8, r8)
 8000f28:	200001e4 	.word	0x200001e4

08000f2c <_sbrk_r>:
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	b570      	push	{r4, r5, r6, lr}
 8000f30:	4d06      	ldr	r5, [pc, #24]	@ (8000f4c <_sbrk_r+0x20>)
 8000f32:	0004      	movs	r4, r0
 8000f34:	0008      	movs	r0, r1
 8000f36:	602b      	str	r3, [r5, #0]
 8000f38:	f7ff fac6 	bl	80004c8 <_sbrk>
 8000f3c:	1c43      	adds	r3, r0, #1
 8000f3e:	d103      	bne.n	8000f48 <_sbrk_r+0x1c>
 8000f40:	682b      	ldr	r3, [r5, #0]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d000      	beq.n	8000f48 <_sbrk_r+0x1c>
 8000f46:	6023      	str	r3, [r4, #0]
 8000f48:	bd70      	pop	{r4, r5, r6, pc}
 8000f4a:	46c0      	nop			@ (mov r8, r8)
 8000f4c:	200001e4 	.word	0x200001e4

08000f50 <findslot>:
 8000f50:	4b0a      	ldr	r3, [pc, #40]	@ (8000f7c <findslot+0x2c>)
 8000f52:	b510      	push	{r4, lr}
 8000f54:	0004      	movs	r4, r0
 8000f56:	6818      	ldr	r0, [r3, #0]
 8000f58:	2800      	cmp	r0, #0
 8000f5a:	d004      	beq.n	8000f66 <findslot+0x16>
 8000f5c:	6a03      	ldr	r3, [r0, #32]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d101      	bne.n	8000f66 <findslot+0x16>
 8000f62:	f7ff fba1 	bl	80006a8 <__sinit>
 8000f66:	2000      	movs	r0, #0
 8000f68:	2c13      	cmp	r4, #19
 8000f6a:	d805      	bhi.n	8000f78 <findslot+0x28>
 8000f6c:	4b04      	ldr	r3, [pc, #16]	@ (8000f80 <findslot+0x30>)
 8000f6e:	00e4      	lsls	r4, r4, #3
 8000f70:	58e2      	ldr	r2, [r4, r3]
 8000f72:	3201      	adds	r2, #1
 8000f74:	d000      	beq.n	8000f78 <findslot+0x28>
 8000f76:	18e0      	adds	r0, r4, r3
 8000f78:	bd10      	pop	{r4, pc}
 8000f7a:	46c0      	nop			@ (mov r8, r8)
 8000f7c:	2000001c 	.word	0x2000001c
 8000f80:	20000200 	.word	0x20000200

08000f84 <error>:
 8000f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f86:	0004      	movs	r4, r0
 8000f88:	f7ff fd64 	bl	8000a54 <__errno>
 8000f8c:	2613      	movs	r6, #19
 8000f8e:	0005      	movs	r5, r0
 8000f90:	2700      	movs	r7, #0
 8000f92:	1c30      	adds	r0, r6, #0
 8000f94:	1c39      	adds	r1, r7, #0
 8000f96:	beab      	bkpt	0x00ab
 8000f98:	1c06      	adds	r6, r0, #0
 8000f9a:	602e      	str	r6, [r5, #0]
 8000f9c:	0020      	movs	r0, r4
 8000f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000fa0 <checkerror>:
 8000fa0:	b510      	push	{r4, lr}
 8000fa2:	1c43      	adds	r3, r0, #1
 8000fa4:	d101      	bne.n	8000faa <checkerror+0xa>
 8000fa6:	f7ff ffed 	bl	8000f84 <error>
 8000faa:	bd10      	pop	{r4, pc}

08000fac <_swiread>:
 8000fac:	b530      	push	{r4, r5, lr}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	ad01      	add	r5, sp, #4
 8000fb2:	9001      	str	r0, [sp, #4]
 8000fb4:	9102      	str	r1, [sp, #8]
 8000fb6:	9203      	str	r2, [sp, #12]
 8000fb8:	2406      	movs	r4, #6
 8000fba:	1c20      	adds	r0, r4, #0
 8000fbc:	1c29      	adds	r1, r5, #0
 8000fbe:	beab      	bkpt	0x00ab
 8000fc0:	1c04      	adds	r4, r0, #0
 8000fc2:	0020      	movs	r0, r4
 8000fc4:	f7ff ffec 	bl	8000fa0 <checkerror>
 8000fc8:	b005      	add	sp, #20
 8000fca:	bd30      	pop	{r4, r5, pc}

08000fcc <_read>:
 8000fcc:	b570      	push	{r4, r5, r6, lr}
 8000fce:	000e      	movs	r6, r1
 8000fd0:	0014      	movs	r4, r2
 8000fd2:	f7ff ffbd 	bl	8000f50 <findslot>
 8000fd6:	1e05      	subs	r5, r0, #0
 8000fd8:	d106      	bne.n	8000fe8 <_read+0x1c>
 8000fda:	f7ff fd3b 	bl	8000a54 <__errno>
 8000fde:	2309      	movs	r3, #9
 8000fe0:	6003      	str	r3, [r0, #0]
 8000fe2:	2001      	movs	r0, #1
 8000fe4:	4240      	negs	r0, r0
 8000fe6:	bd70      	pop	{r4, r5, r6, pc}
 8000fe8:	0022      	movs	r2, r4
 8000fea:	0031      	movs	r1, r6
 8000fec:	6800      	ldr	r0, [r0, #0]
 8000fee:	f7ff ffdd 	bl	8000fac <_swiread>
 8000ff2:	1c43      	adds	r3, r0, #1
 8000ff4:	d0f5      	beq.n	8000fe2 <_read+0x16>
 8000ff6:	686b      	ldr	r3, [r5, #4]
 8000ff8:	1a20      	subs	r0, r4, r0
 8000ffa:	181b      	adds	r3, r3, r0
 8000ffc:	606b      	str	r3, [r5, #4]
 8000ffe:	e7f2      	b.n	8000fe6 <_read+0x1a>

08001000 <_swilseek>:
 8001000:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001002:	000c      	movs	r4, r1
 8001004:	0016      	movs	r6, r2
 8001006:	f7ff ffa3 	bl	8000f50 <findslot>
 800100a:	1e05      	subs	r5, r0, #0
 800100c:	d107      	bne.n	800101e <_swilseek+0x1e>
 800100e:	f7ff fd21 	bl	8000a54 <__errno>
 8001012:	2309      	movs	r3, #9
 8001014:	6003      	str	r3, [r0, #0]
 8001016:	2401      	movs	r4, #1
 8001018:	4264      	negs	r4, r4
 800101a:	0020      	movs	r0, r4
 800101c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800101e:	2e02      	cmp	r6, #2
 8001020:	d903      	bls.n	800102a <_swilseek+0x2a>
 8001022:	f7ff fd17 	bl	8000a54 <__errno>
 8001026:	2316      	movs	r3, #22
 8001028:	e7f4      	b.n	8001014 <_swilseek+0x14>
 800102a:	2e01      	cmp	r6, #1
 800102c:	d112      	bne.n	8001054 <_swilseek+0x54>
 800102e:	6843      	ldr	r3, [r0, #4]
 8001030:	18e4      	adds	r4, r4, r3
 8001032:	d4f6      	bmi.n	8001022 <_swilseek+0x22>
 8001034:	466f      	mov	r7, sp
 8001036:	682b      	ldr	r3, [r5, #0]
 8001038:	260a      	movs	r6, #10
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	607c      	str	r4, [r7, #4]
 800103e:	1c30      	adds	r0, r6, #0
 8001040:	1c39      	adds	r1, r7, #0
 8001042:	beab      	bkpt	0x00ab
 8001044:	1c06      	adds	r6, r0, #0
 8001046:	0030      	movs	r0, r6
 8001048:	f7ff ffaa 	bl	8000fa0 <checkerror>
 800104c:	2800      	cmp	r0, #0
 800104e:	dbe2      	blt.n	8001016 <_swilseek+0x16>
 8001050:	606c      	str	r4, [r5, #4]
 8001052:	e7e2      	b.n	800101a <_swilseek+0x1a>
 8001054:	6803      	ldr	r3, [r0, #0]
 8001056:	2e02      	cmp	r6, #2
 8001058:	d1ec      	bne.n	8001034 <_swilseek+0x34>
 800105a:	466f      	mov	r7, sp
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	360a      	adds	r6, #10
 8001060:	1c30      	adds	r0, r6, #0
 8001062:	1c39      	adds	r1, r7, #0
 8001064:	beab      	bkpt	0x00ab
 8001066:	1c06      	adds	r6, r0, #0
 8001068:	0030      	movs	r0, r6
 800106a:	f7ff ff99 	bl	8000fa0 <checkerror>
 800106e:	1824      	adds	r4, r4, r0
 8001070:	3001      	adds	r0, #1
 8001072:	d1df      	bne.n	8001034 <_swilseek+0x34>
 8001074:	e7cf      	b.n	8001016 <_swilseek+0x16>

08001076 <_lseek>:
 8001076:	b510      	push	{r4, lr}
 8001078:	f7ff ffc2 	bl	8001000 <_swilseek>
 800107c:	bd10      	pop	{r4, pc}

0800107e <_swiwrite>:
 800107e:	b530      	push	{r4, r5, lr}
 8001080:	b085      	sub	sp, #20
 8001082:	ad01      	add	r5, sp, #4
 8001084:	9001      	str	r0, [sp, #4]
 8001086:	9102      	str	r1, [sp, #8]
 8001088:	9203      	str	r2, [sp, #12]
 800108a:	2405      	movs	r4, #5
 800108c:	1c20      	adds	r0, r4, #0
 800108e:	1c29      	adds	r1, r5, #0
 8001090:	beab      	bkpt	0x00ab
 8001092:	1c04      	adds	r4, r0, #0
 8001094:	0020      	movs	r0, r4
 8001096:	f7ff ff83 	bl	8000fa0 <checkerror>
 800109a:	b005      	add	sp, #20
 800109c:	bd30      	pop	{r4, r5, pc}

0800109e <_write>:
 800109e:	b570      	push	{r4, r5, r6, lr}
 80010a0:	000e      	movs	r6, r1
 80010a2:	0015      	movs	r5, r2
 80010a4:	f7ff ff54 	bl	8000f50 <findslot>
 80010a8:	1e04      	subs	r4, r0, #0
 80010aa:	d106      	bne.n	80010ba <_write+0x1c>
 80010ac:	f7ff fcd2 	bl	8000a54 <__errno>
 80010b0:	2309      	movs	r3, #9
 80010b2:	6003      	str	r3, [r0, #0]
 80010b4:	2001      	movs	r0, #1
 80010b6:	4240      	negs	r0, r0
 80010b8:	bd70      	pop	{r4, r5, r6, pc}
 80010ba:	002a      	movs	r2, r5
 80010bc:	0031      	movs	r1, r6
 80010be:	6800      	ldr	r0, [r0, #0]
 80010c0:	f7ff ffdd 	bl	800107e <_swiwrite>
 80010c4:	1e03      	subs	r3, r0, #0
 80010c6:	dbf5      	blt.n	80010b4 <_write+0x16>
 80010c8:	6862      	ldr	r2, [r4, #4]
 80010ca:	1a28      	subs	r0, r5, r0
 80010cc:	1812      	adds	r2, r2, r0
 80010ce:	6062      	str	r2, [r4, #4]
 80010d0:	42ab      	cmp	r3, r5
 80010d2:	d1f1      	bne.n	80010b8 <_write+0x1a>
 80010d4:	2000      	movs	r0, #0
 80010d6:	f7ff ff55 	bl	8000f84 <error>
 80010da:	e7ed      	b.n	80010b8 <_write+0x1a>

080010dc <_swiclose>:
 80010dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80010de:	2402      	movs	r4, #2
 80010e0:	9001      	str	r0, [sp, #4]
 80010e2:	ad01      	add	r5, sp, #4
 80010e4:	1c20      	adds	r0, r4, #0
 80010e6:	1c29      	adds	r1, r5, #0
 80010e8:	beab      	bkpt	0x00ab
 80010ea:	1c04      	adds	r4, r0, #0
 80010ec:	0020      	movs	r0, r4
 80010ee:	f7ff ff57 	bl	8000fa0 <checkerror>
 80010f2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

080010f4 <_close>:
 80010f4:	b570      	push	{r4, r5, r6, lr}
 80010f6:	0005      	movs	r5, r0
 80010f8:	f7ff ff2a 	bl	8000f50 <findslot>
 80010fc:	1e04      	subs	r4, r0, #0
 80010fe:	d106      	bne.n	800110e <_close+0x1a>
 8001100:	f7ff fca8 	bl	8000a54 <__errno>
 8001104:	2309      	movs	r3, #9
 8001106:	6003      	str	r3, [r0, #0]
 8001108:	2001      	movs	r0, #1
 800110a:	4240      	negs	r0, r0
 800110c:	bd70      	pop	{r4, r5, r6, pc}
 800110e:	3d01      	subs	r5, #1
 8001110:	2d01      	cmp	r5, #1
 8001112:	d809      	bhi.n	8001128 <_close+0x34>
 8001114:	4b09      	ldr	r3, [pc, #36]	@ (800113c <_close+0x48>)
 8001116:	689a      	ldr	r2, [r3, #8]
 8001118:	691b      	ldr	r3, [r3, #16]
 800111a:	429a      	cmp	r2, r3
 800111c:	d104      	bne.n	8001128 <_close+0x34>
 800111e:	2301      	movs	r3, #1
 8001120:	425b      	negs	r3, r3
 8001122:	6003      	str	r3, [r0, #0]
 8001124:	2000      	movs	r0, #0
 8001126:	e7f1      	b.n	800110c <_close+0x18>
 8001128:	6820      	ldr	r0, [r4, #0]
 800112a:	f7ff ffd7 	bl	80010dc <_swiclose>
 800112e:	2800      	cmp	r0, #0
 8001130:	d1ec      	bne.n	800110c <_close+0x18>
 8001132:	2301      	movs	r3, #1
 8001134:	425b      	negs	r3, r3
 8001136:	6023      	str	r3, [r4, #0]
 8001138:	e7e8      	b.n	800110c <_close+0x18>
 800113a:	46c0      	nop			@ (mov r8, r8)
 800113c:	20000200 	.word	0x20000200

08001140 <_swistat>:
 8001140:	b570      	push	{r4, r5, r6, lr}
 8001142:	000c      	movs	r4, r1
 8001144:	f7ff ff04 	bl	8000f50 <findslot>
 8001148:	1e05      	subs	r5, r0, #0
 800114a:	d106      	bne.n	800115a <_swistat+0x1a>
 800114c:	f7ff fc82 	bl	8000a54 <__errno>
 8001150:	2309      	movs	r3, #9
 8001152:	6003      	str	r3, [r0, #0]
 8001154:	2001      	movs	r0, #1
 8001156:	4240      	negs	r0, r0
 8001158:	bd70      	pop	{r4, r5, r6, pc}
 800115a:	2380      	movs	r3, #128	@ 0x80
 800115c:	6862      	ldr	r2, [r4, #4]
 800115e:	019b      	lsls	r3, r3, #6
 8001160:	4313      	orrs	r3, r2
 8001162:	6063      	str	r3, [r4, #4]
 8001164:	2380      	movs	r3, #128	@ 0x80
 8001166:	00db      	lsls	r3, r3, #3
 8001168:	260c      	movs	r6, #12
 800116a:	64a3      	str	r3, [r4, #72]	@ 0x48
 800116c:	1c30      	adds	r0, r6, #0
 800116e:	1c29      	adds	r1, r5, #0
 8001170:	beab      	bkpt	0x00ab
 8001172:	1c05      	adds	r5, r0, #0
 8001174:	0028      	movs	r0, r5
 8001176:	f7ff ff13 	bl	8000fa0 <checkerror>
 800117a:	1c43      	adds	r3, r0, #1
 800117c:	d0ea      	beq.n	8001154 <_swistat+0x14>
 800117e:	6120      	str	r0, [r4, #16]
 8001180:	2000      	movs	r0, #0
 8001182:	e7e9      	b.n	8001158 <_swistat+0x18>

08001184 <_fstat>:
 8001184:	b570      	push	{r4, r5, r6, lr}
 8001186:	000c      	movs	r4, r1
 8001188:	0005      	movs	r5, r0
 800118a:	2258      	movs	r2, #88	@ 0x58
 800118c:	2100      	movs	r1, #0
 800118e:	0020      	movs	r0, r4
 8001190:	f7ff fc0a 	bl	80009a8 <memset>
 8001194:	0028      	movs	r0, r5
 8001196:	0021      	movs	r1, r4
 8001198:	f7ff ffd2 	bl	8001140 <_swistat>
 800119c:	bd70      	pop	{r4, r5, r6, pc}

0800119e <_stat>:
 800119e:	b570      	push	{r4, r5, r6, lr}
 80011a0:	000d      	movs	r5, r1
 80011a2:	0004      	movs	r4, r0
 80011a4:	2258      	movs	r2, #88	@ 0x58
 80011a6:	2100      	movs	r1, #0
 80011a8:	0028      	movs	r0, r5
 80011aa:	f7ff fbfd 	bl	80009a8 <memset>
 80011ae:	0020      	movs	r0, r4
 80011b0:	2100      	movs	r1, #0
 80011b2:	f000 f813 	bl	80011dc <_swiopen>
 80011b6:	0004      	movs	r4, r0
 80011b8:	1c43      	adds	r3, r0, #1
 80011ba:	d00c      	beq.n	80011d6 <_stat+0x38>
 80011bc:	2381      	movs	r3, #129	@ 0x81
 80011be:	686a      	ldr	r2, [r5, #4]
 80011c0:	021b      	lsls	r3, r3, #8
 80011c2:	4313      	orrs	r3, r2
 80011c4:	0029      	movs	r1, r5
 80011c6:	606b      	str	r3, [r5, #4]
 80011c8:	f7ff ffba 	bl	8001140 <_swistat>
 80011cc:	0005      	movs	r5, r0
 80011ce:	0020      	movs	r0, r4
 80011d0:	f7ff ff90 	bl	80010f4 <_close>
 80011d4:	002c      	movs	r4, r5
 80011d6:	0020      	movs	r0, r4
 80011d8:	bd70      	pop	{r4, r5, r6, pc}
	...

080011dc <_swiopen>:
 80011dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011de:	000e      	movs	r6, r1
 80011e0:	2500      	movs	r5, #0
 80011e2:	4b2a      	ldr	r3, [pc, #168]	@ (800128c <_swiopen+0xb0>)
 80011e4:	b09b      	sub	sp, #108	@ 0x6c
 80011e6:	9001      	str	r0, [sp, #4]
 80011e8:	9302      	str	r3, [sp, #8]
 80011ea:	00eb      	lsls	r3, r5, #3
 80011ec:	9303      	str	r3, [sp, #12]
 80011ee:	9b02      	ldr	r3, [sp, #8]
 80011f0:	00ea      	lsls	r2, r5, #3
 80011f2:	589b      	ldr	r3, [r3, r2]
 80011f4:	3301      	adds	r3, #1
 80011f6:	d032      	beq.n	800125e <_swiopen+0x82>
 80011f8:	3501      	adds	r5, #1
 80011fa:	2d14      	cmp	r5, #20
 80011fc:	d1f5      	bne.n	80011ea <_swiopen+0xe>
 80011fe:	f7ff fc29 	bl	8000a54 <__errno>
 8001202:	2318      	movs	r3, #24
 8001204:	e03b      	b.n	800127e <_swiopen+0xa2>
 8001206:	2302      	movs	r3, #2
 8001208:	03f4      	lsls	r4, r6, #15
 800120a:	0fe4      	lsrs	r4, r4, #31
 800120c:	421e      	tst	r6, r3
 800120e:	d000      	beq.n	8001212 <_swiopen+0x36>
 8001210:	431c      	orrs	r4, r3
 8001212:	4b1f      	ldr	r3, [pc, #124]	@ (8001290 <_swiopen+0xb4>)
 8001214:	421e      	tst	r6, r3
 8001216:	d001      	beq.n	800121c <_swiopen+0x40>
 8001218:	2304      	movs	r3, #4
 800121a:	431c      	orrs	r4, r3
 800121c:	2308      	movs	r3, #8
 800121e:	421e      	tst	r6, r3
 8001220:	d002      	beq.n	8001228 <_swiopen+0x4c>
 8001222:	2204      	movs	r2, #4
 8001224:	4394      	bics	r4, r2
 8001226:	431c      	orrs	r4, r3
 8001228:	9b01      	ldr	r3, [sp, #4]
 800122a:	0018      	movs	r0, r3
 800122c:	9304      	str	r3, [sp, #16]
 800122e:	f7fe ff6b 	bl	8000108 <strlen>
 8001232:	607c      	str	r4, [r7, #4]
 8001234:	60b8      	str	r0, [r7, #8]
 8001236:	2401      	movs	r4, #1
 8001238:	1c20      	adds	r0, r4, #0
 800123a:	1c39      	adds	r1, r7, #0
 800123c:	beab      	bkpt	0x00ab
 800123e:	1c04      	adds	r4, r0, #0
 8001240:	2c00      	cmp	r4, #0
 8001242:	db07      	blt.n	8001254 <_swiopen+0x78>
 8001244:	00ea      	lsls	r2, r5, #3
 8001246:	9b02      	ldr	r3, [sp, #8]
 8001248:	4694      	mov	ip, r2
 800124a:	509c      	str	r4, [r3, r2]
 800124c:	2200      	movs	r2, #0
 800124e:	4463      	add	r3, ip
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	e017      	b.n	8001284 <_swiopen+0xa8>
 8001254:	0020      	movs	r0, r4
 8001256:	f7ff fe95 	bl	8000f84 <error>
 800125a:	0005      	movs	r5, r0
 800125c:	e012      	b.n	8001284 <_swiopen+0xa8>
 800125e:	23a0      	movs	r3, #160	@ 0xa0
 8001260:	0032      	movs	r2, r6
 8001262:	011b      	lsls	r3, r3, #4
 8001264:	401a      	ands	r2, r3
 8001266:	af04      	add	r7, sp, #16
 8001268:	429a      	cmp	r2, r3
 800126a:	d1cc      	bne.n	8001206 <_swiopen+0x2a>
 800126c:	0039      	movs	r1, r7
 800126e:	9801      	ldr	r0, [sp, #4]
 8001270:	f7ff ff95 	bl	800119e <_stat>
 8001274:	3001      	adds	r0, #1
 8001276:	d0c6      	beq.n	8001206 <_swiopen+0x2a>
 8001278:	f7ff fbec 	bl	8000a54 <__errno>
 800127c:	2311      	movs	r3, #17
 800127e:	2501      	movs	r5, #1
 8001280:	6003      	str	r3, [r0, #0]
 8001282:	426d      	negs	r5, r5
 8001284:	0028      	movs	r0, r5
 8001286:	b01b      	add	sp, #108	@ 0x6c
 8001288:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800128a:	46c0      	nop			@ (mov r8, r8)
 800128c:	20000200 	.word	0x20000200
 8001290:	00000601 	.word	0x00000601

08001294 <_get_semihosting_exts>:
 8001294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001296:	b085      	sub	sp, #20
 8001298:	9000      	str	r0, [sp, #0]
 800129a:	9101      	str	r1, [sp, #4]
 800129c:	4826      	ldr	r0, [pc, #152]	@ (8001338 <_get_semihosting_exts+0xa4>)
 800129e:	2100      	movs	r1, #0
 80012a0:	0015      	movs	r5, r2
 80012a2:	f7ff ff9b 	bl	80011dc <_swiopen>
 80012a6:	0004      	movs	r4, r0
 80012a8:	002a      	movs	r2, r5
 80012aa:	2100      	movs	r1, #0
 80012ac:	9800      	ldr	r0, [sp, #0]
 80012ae:	f7ff fb7b 	bl	80009a8 <memset>
 80012b2:	1c63      	adds	r3, r4, #1
 80012b4:	d013      	beq.n	80012de <_get_semihosting_exts+0x4a>
 80012b6:	0020      	movs	r0, r4
 80012b8:	f7ff fe4a 	bl	8000f50 <findslot>
 80012bc:	260c      	movs	r6, #12
 80012be:	0007      	movs	r7, r0
 80012c0:	1c30      	adds	r0, r6, #0
 80012c2:	1c39      	adds	r1, r7, #0
 80012c4:	beab      	bkpt	0x00ab
 80012c6:	1c06      	adds	r6, r0, #0
 80012c8:	0030      	movs	r0, r6
 80012ca:	f7ff fe69 	bl	8000fa0 <checkerror>
 80012ce:	2803      	cmp	r0, #3
 80012d0:	dd02      	ble.n	80012d8 <_get_semihosting_exts+0x44>
 80012d2:	3803      	subs	r0, #3
 80012d4:	42a8      	cmp	r0, r5
 80012d6:	dc06      	bgt.n	80012e6 <_get_semihosting_exts+0x52>
 80012d8:	0020      	movs	r0, r4
 80012da:	f7ff ff0b 	bl	80010f4 <_close>
 80012de:	2001      	movs	r0, #1
 80012e0:	4240      	negs	r0, r0
 80012e2:	b005      	add	sp, #20
 80012e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012e6:	ae03      	add	r6, sp, #12
 80012e8:	2204      	movs	r2, #4
 80012ea:	0031      	movs	r1, r6
 80012ec:	0020      	movs	r0, r4
 80012ee:	f7ff fe6d 	bl	8000fcc <_read>
 80012f2:	2803      	cmp	r0, #3
 80012f4:	ddf0      	ble.n	80012d8 <_get_semihosting_exts+0x44>
 80012f6:	7833      	ldrb	r3, [r6, #0]
 80012f8:	2b53      	cmp	r3, #83	@ 0x53
 80012fa:	d1ed      	bne.n	80012d8 <_get_semihosting_exts+0x44>
 80012fc:	7873      	ldrb	r3, [r6, #1]
 80012fe:	2b48      	cmp	r3, #72	@ 0x48
 8001300:	d1ea      	bne.n	80012d8 <_get_semihosting_exts+0x44>
 8001302:	78b3      	ldrb	r3, [r6, #2]
 8001304:	2b46      	cmp	r3, #70	@ 0x46
 8001306:	d1e7      	bne.n	80012d8 <_get_semihosting_exts+0x44>
 8001308:	78f3      	ldrb	r3, [r6, #3]
 800130a:	2b42      	cmp	r3, #66	@ 0x42
 800130c:	d1e4      	bne.n	80012d8 <_get_semihosting_exts+0x44>
 800130e:	2201      	movs	r2, #1
 8001310:	0020      	movs	r0, r4
 8001312:	9901      	ldr	r1, [sp, #4]
 8001314:	f7ff fe74 	bl	8001000 <_swilseek>
 8001318:	2800      	cmp	r0, #0
 800131a:	dbdd      	blt.n	80012d8 <_get_semihosting_exts+0x44>
 800131c:	002a      	movs	r2, r5
 800131e:	9900      	ldr	r1, [sp, #0]
 8001320:	0020      	movs	r0, r4
 8001322:	f7ff fe53 	bl	8000fcc <_read>
 8001326:	0005      	movs	r5, r0
 8001328:	0020      	movs	r0, r4
 800132a:	f7ff fee3 	bl	80010f4 <_close>
 800132e:	0028      	movs	r0, r5
 8001330:	f7ff fe36 	bl	8000fa0 <checkerror>
 8001334:	e7d5      	b.n	80012e2 <_get_semihosting_exts+0x4e>
 8001336:	46c0      	nop			@ (mov r8, r8)
 8001338:	080014d3 	.word	0x080014d3

0800133c <initialise_semihosting_exts>:
 800133c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800133e:	2401      	movs	r4, #1
 8001340:	2100      	movs	r1, #0
 8001342:	4e09      	ldr	r6, [pc, #36]	@ (8001368 <initialise_semihosting_exts+0x2c>)
 8001344:	4d09      	ldr	r5, [pc, #36]	@ (800136c <initialise_semihosting_exts+0x30>)
 8001346:	af01      	add	r7, sp, #4
 8001348:	0022      	movs	r2, r4
 800134a:	0038      	movs	r0, r7
 800134c:	6031      	str	r1, [r6, #0]
 800134e:	602c      	str	r4, [r5, #0]
 8001350:	f7ff ffa0 	bl	8001294 <_get_semihosting_exts>
 8001354:	2800      	cmp	r0, #0
 8001356:	dd05      	ble.n	8001364 <initialise_semihosting_exts+0x28>
 8001358:	2202      	movs	r2, #2
 800135a:	783b      	ldrb	r3, [r7, #0]
 800135c:	401c      	ands	r4, r3
 800135e:	4013      	ands	r3, r2
 8001360:	6034      	str	r4, [r6, #0]
 8001362:	602b      	str	r3, [r5, #0]
 8001364:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001366:	46c0      	nop			@ (mov r8, r8)
 8001368:	20000070 	.word	0x20000070
 800136c:	2000006c 	.word	0x2000006c

08001370 <_has_ext_stdout_stderr>:
 8001370:	b510      	push	{r4, lr}
 8001372:	4c04      	ldr	r4, [pc, #16]	@ (8001384 <_has_ext_stdout_stderr+0x14>)
 8001374:	6823      	ldr	r3, [r4, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	da01      	bge.n	800137e <_has_ext_stdout_stderr+0xe>
 800137a:	f7ff ffdf 	bl	800133c <initialise_semihosting_exts>
 800137e:	6820      	ldr	r0, [r4, #0]
 8001380:	bd10      	pop	{r4, pc}
 8001382:	46c0      	nop			@ (mov r8, r8)
 8001384:	2000006c 	.word	0x2000006c

08001388 <initialise_monitor_handles>:
 8001388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800138a:	4b28      	ldr	r3, [pc, #160]	@ (800142c <initialise_monitor_handles+0xa4>)
 800138c:	b087      	sub	sp, #28
 800138e:	9303      	str	r3, [sp, #12]
 8001390:	2500      	movs	r5, #0
 8001392:	9300      	str	r3, [sp, #0]
 8001394:	2303      	movs	r3, #3
 8001396:	ac03      	add	r4, sp, #12
 8001398:	60a3      	str	r3, [r4, #8]
 800139a:	2601      	movs	r6, #1
 800139c:	6065      	str	r5, [r4, #4]
 800139e:	1c30      	adds	r0, r6, #0
 80013a0:	1c21      	adds	r1, r4, #0
 80013a2:	beab      	bkpt	0x00ab
 80013a4:	1c06      	adds	r6, r0, #0
 80013a6:	2101      	movs	r1, #1
 80013a8:	4b21      	ldr	r3, [pc, #132]	@ (8001430 <initialise_monitor_handles+0xa8>)
 80013aa:	4249      	negs	r1, r1
 80013ac:	9301      	str	r3, [sp, #4]
 80013ae:	601e      	str	r6, [r3, #0]
 80013b0:	002b      	movs	r3, r5
 80013b2:	4d20      	ldr	r5, [pc, #128]	@ (8001434 <initialise_monitor_handles+0xac>)
 80013b4:	00da      	lsls	r2, r3, #3
 80013b6:	3301      	adds	r3, #1
 80013b8:	50a9      	str	r1, [r5, r2]
 80013ba:	2b14      	cmp	r3, #20
 80013bc:	d1fa      	bne.n	80013b4 <initialise_monitor_handles+0x2c>
 80013be:	f7ff ffd7 	bl	8001370 <_has_ext_stdout_stderr>
 80013c2:	2800      	cmp	r0, #0
 80013c4:	d018      	beq.n	80013f8 <initialise_monitor_handles+0x70>
 80013c6:	9b00      	ldr	r3, [sp, #0]
 80013c8:	2601      	movs	r6, #1
 80013ca:	9303      	str	r3, [sp, #12]
 80013cc:	2303      	movs	r3, #3
 80013ce:	60a3      	str	r3, [r4, #8]
 80013d0:	3301      	adds	r3, #1
 80013d2:	6063      	str	r3, [r4, #4]
 80013d4:	1c30      	adds	r0, r6, #0
 80013d6:	1c21      	adds	r1, r4, #0
 80013d8:	beab      	bkpt	0x00ab
 80013da:	1c07      	adds	r7, r0, #0
 80013dc:	4b16      	ldr	r3, [pc, #88]	@ (8001438 <initialise_monitor_handles+0xb0>)
 80013de:	9a00      	ldr	r2, [sp, #0]
 80013e0:	601f      	str	r7, [r3, #0]
 80013e2:	2303      	movs	r3, #3
 80013e4:	9203      	str	r2, [sp, #12]
 80013e6:	60a3      	str	r3, [r4, #8]
 80013e8:	3305      	adds	r3, #5
 80013ea:	6063      	str	r3, [r4, #4]
 80013ec:	1c30      	adds	r0, r6, #0
 80013ee:	1c21      	adds	r1, r4, #0
 80013f0:	beab      	bkpt	0x00ab
 80013f2:	1c06      	adds	r6, r0, #0
 80013f4:	4b11      	ldr	r3, [pc, #68]	@ (800143c <initialise_monitor_handles+0xb4>)
 80013f6:	601e      	str	r6, [r3, #0]
 80013f8:	4e10      	ldr	r6, [pc, #64]	@ (800143c <initialise_monitor_handles+0xb4>)
 80013fa:	6833      	ldr	r3, [r6, #0]
 80013fc:	3301      	adds	r3, #1
 80013fe:	d102      	bne.n	8001406 <initialise_monitor_handles+0x7e>
 8001400:	4b0d      	ldr	r3, [pc, #52]	@ (8001438 <initialise_monitor_handles+0xb0>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	6033      	str	r3, [r6, #0]
 8001406:	2400      	movs	r4, #0
 8001408:	9b01      	ldr	r3, [sp, #4]
 800140a:	606c      	str	r4, [r5, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	602b      	str	r3, [r5, #0]
 8001410:	f7ff ffae 	bl	8001370 <_has_ext_stdout_stderr>
 8001414:	42a0      	cmp	r0, r4
 8001416:	d006      	beq.n	8001426 <initialise_monitor_handles+0x9e>
 8001418:	4b07      	ldr	r3, [pc, #28]	@ (8001438 <initialise_monitor_handles+0xb0>)
 800141a:	60ec      	str	r4, [r5, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	616c      	str	r4, [r5, #20]
 8001420:	60ab      	str	r3, [r5, #8]
 8001422:	6833      	ldr	r3, [r6, #0]
 8001424:	612b      	str	r3, [r5, #16]
 8001426:	b007      	add	sp, #28
 8001428:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800142a:	46c0      	nop			@ (mov r8, r8)
 800142c:	080014e9 	.word	0x080014e9
 8001430:	200001fc 	.word	0x200001fc
 8001434:	20000200 	.word	0x20000200
 8001438:	200001f8 	.word	0x200001f8
 800143c:	200001f4 	.word	0x200001f4

08001440 <_isatty>:
 8001440:	b570      	push	{r4, r5, r6, lr}
 8001442:	f7ff fd85 	bl	8000f50 <findslot>
 8001446:	2409      	movs	r4, #9
 8001448:	1e05      	subs	r5, r0, #0
 800144a:	d104      	bne.n	8001456 <_isatty+0x16>
 800144c:	f7ff fb02 	bl	8000a54 <__errno>
 8001450:	6004      	str	r4, [r0, #0]
 8001452:	2000      	movs	r0, #0
 8001454:	bd70      	pop	{r4, r5, r6, pc}
 8001456:	1c20      	adds	r0, r4, #0
 8001458:	1c29      	adds	r1, r5, #0
 800145a:	beab      	bkpt	0x00ab
 800145c:	1c04      	adds	r4, r0, #0
 800145e:	0020      	movs	r0, r4
 8001460:	2c01      	cmp	r4, #1
 8001462:	d0f7      	beq.n	8001454 <_isatty+0x14>
 8001464:	f7ff faf6 	bl	8000a54 <__errno>
 8001468:	2513      	movs	r5, #19
 800146a:	0004      	movs	r4, r0
 800146c:	2600      	movs	r6, #0
 800146e:	1c28      	adds	r0, r5, #0
 8001470:	1c31      	adds	r1, r6, #0
 8001472:	beab      	bkpt	0x00ab
 8001474:	1c05      	adds	r5, r0, #0
 8001476:	6025      	str	r5, [r4, #0]
 8001478:	e7eb      	b.n	8001452 <_isatty+0x12>
	...

0800147c <_init>:
 800147c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800147e:	46c0      	nop			@ (mov r8, r8)
 8001480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001482:	bc08      	pop	{r3}
 8001484:	469e      	mov	lr, r3
 8001486:	4770      	bx	lr

08001488 <_fini>:
 8001488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800148a:	46c0      	nop			@ (mov r8, r8)
 800148c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800148e:	bc08      	pop	{r3}
 8001490:	469e      	mov	lr, r3
 8001492:	4770      	bx	lr
